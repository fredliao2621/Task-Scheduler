
Task Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e08  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08000f90  08000f90  00001f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001018  08001018  0000306c  2**0
                  CONTENTS
  4 .ARM          00000000  08001018  08001018  0000306c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001018  08001018  0000306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001018  08001018  00002018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800101c  0800101c  0000201c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08001020  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000306c  2**0
                  CONTENTS
 10 .bss          00000180  2000006c  2000006c  0000306c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ec  200001ec  0000306c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b04  00000000  00000000  0000309c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003c1  00000000  00000000  00003ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  00003f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000113  00000000  00000000  000040f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d3d  00000000  00000000  00004203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001673  00000000  00000000  00006f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009aca  00000000  00000000  000085b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001207d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b6c  00000000  00000000  000120c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  00012c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000f78 	.word	0x08000f78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	08000f78 	.word	0x08000f78

080001c8 <main>:
uint32_t psp_of_tasks[MAX_TASKS] = {T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START};
uint32_t task_handlers[MAX_TASKS];
uint8_t current_task = 0; //task1 is running

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	enable_processor_faults(); //我們要處理stack memory，可能會不小心使用非法指令等等，enable來追蹤這些fault
 80001cc:	f000 f8ce 	bl	800036c <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START); //初始化MSP
 80001d0:	480d      	ldr	r0, [pc, #52]	@ (8000208 <main+0x40>)
 80001d2:	f000 f87d 	bl	80002d0 <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler; //不同task handler的位址
 80001d6:	4a0d      	ldr	r2, [pc, #52]	@ (800020c <main+0x44>)
 80001d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000210 <main+0x48>)
 80001da:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 80001dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000214 <main+0x4c>)
 80001de:	4b0c      	ldr	r3, [pc, #48]	@ (8000210 <main+0x48>)
 80001e0:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 80001e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000218 <main+0x50>)
 80001e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000210 <main+0x48>)
 80001e6:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 80001e8:	4a0c      	ldr	r2, [pc, #48]	@ (800021c <main+0x54>)
 80001ea:	4b09      	ldr	r3, [pc, #36]	@ (8000210 <main+0x48>)
 80001ec:	60da      	str	r2, [r3, #12]

	init_tasks_stack();
 80001ee:	f000 f875 	bl	80002dc <init_tasks_stack>

	init_systick_timer(TICK_HZ);
 80001f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001f6:	f000 f833 	bl	8000260 <init_systick_timer>

	switch_sp_to_psp(); //前面是使用MSP，接下來要使用PSP
 80001fa:	f000 f8e9 	bl	80003d0 <switch_sp_to_psp>

	task1_handler();
 80001fe:	f000 f80f 	bl	8000220 <task1_handler>
    /* Loop forever */
	for(;;);
 8000202:	bf00      	nop
 8000204:	e7fd      	b.n	8000202 <main+0x3a>
 8000206:	bf00      	nop
 8000208:	2001f000 	.word	0x2001f000
 800020c:	08000221 	.word	0x08000221
 8000210:	20000088 	.word	0x20000088
 8000214:	08000231 	.word	0x08000231
 8000218:	08000241 	.word	0x08000241
 800021c:	08000251 	.word	0x08000251

08000220 <task1_handler>:
}

void task1_handler(void){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task1\n");
 8000224:	4801      	ldr	r0, [pc, #4]	@ (800022c <task1_handler+0xc>)
 8000226:	f000 fb13 	bl	8000850 <puts>
 800022a:	e7fb      	b.n	8000224 <task1_handler+0x4>
 800022c:	08000f90 	.word	0x08000f90

08000230 <task2_handler>:
	}
}

void task2_handler(void){
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task2\n");
 8000234:	4801      	ldr	r0, [pc, #4]	@ (800023c <task2_handler+0xc>)
 8000236:	f000 fb0b 	bl	8000850 <puts>
 800023a:	e7fb      	b.n	8000234 <task2_handler+0x4>
 800023c:	08000fa0 	.word	0x08000fa0

08000240 <task3_handler>:
	}
}

void task3_handler(void){
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task3\n");
 8000244:	4801      	ldr	r0, [pc, #4]	@ (800024c <task3_handler+0xc>)
 8000246:	f000 fb03 	bl	8000850 <puts>
 800024a:	e7fb      	b.n	8000244 <task3_handler+0x4>
 800024c:	08000fb0 	.word	0x08000fb0

08000250 <task4_handler>:
	}
}

void task4_handler(void){
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task4\n");
 8000254:	4801      	ldr	r0, [pc, #4]	@ (800025c <task4_handler+0xc>)
 8000256:	f000 fafb 	bl	8000850 <puts>
 800025a:	e7fb      	b.n	8000254 <task4_handler+0x4>
 800025c:	08000fc0 	.word	0x08000fc0

08000260 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz){
 8000260:	b480      	push	{r7}
 8000262:	b087      	sub	sp, #28
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000268:	4b16      	ldr	r3, [pc, #88]	@ (80002c4 <init_systick_timer+0x64>)
 800026a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 800026c:	4b16      	ldr	r3, [pc, #88]	@ (80002c8 <init_systick_timer+0x68>)
 800026e:	613b      	str	r3, [r7, #16]
	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;
 8000270:	4a16      	ldr	r2, [pc, #88]	@ (80002cc <init_systick_timer+0x6c>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	fbb2 f3f3 	udiv	r3, r2, r3
 8000278:	3b01      	subs	r3, #1
 800027a:	60fb      	str	r3, [r7, #12]

	//Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFF);
 800027c:	697b      	ldr	r3, [r7, #20]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	601a      	str	r2, [r3, #0]

	//Load the value of SVR
	*pSRVR |= count_value;
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	431a      	orrs	r2, r3
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	601a      	str	r2, [r3, #0]

	//Do some setting
	*pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 8000294:	693b      	ldr	r3, [r7, #16]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f043 0202 	orr.w	r2, r3, #2
 800029c:	693b      	ldr	r3, [r7, #16]
 800029e:	601a      	str	r2, [r3, #0]
	*pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80002a0:	693b      	ldr	r3, [r7, #16]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f043 0204 	orr.w	r2, r3, #4
 80002a8:	693b      	ldr	r3, [r7, #16]
 80002aa:	601a      	str	r2, [r3, #0]

	//Enable the systick
	*pSCSR |= ( 1 << 0); //enables the counter
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	f043 0201 	orr.w	r2, r3, #1
 80002b4:	693b      	ldr	r3, [r7, #16]
 80002b6:	601a      	str	r2, [r3, #0]
}
 80002b8:	bf00      	nop
 80002ba:	371c      	adds	r7, #28
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr
 80002c4:	e000e014 	.word	0xe000e014
 80002c8:	e000e010 	.word	0xe000e010
 80002cc:	00f42400 	.word	0x00f42400

080002d0 <init_scheduler_stack>:

//更改MSP的值，MSP是special reg，所以要用inline assembly，所以function要做成naked function
__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_stack){
 80002d0:	4603      	mov	r3, r0
	asm volatile("MSR MSP,%0"::"r"(sched_top_stack):);
 80002d2:	f383 8808 	msr	MSP, r3
	//volatile("MSR MSP,R0");
	asm volatile("BX LR");
 80002d6:	4770      	bx	lr
	//BX(Branch Indirect)把LR的值複製到PC
}
 80002d8:	bf00      	nop
	...

080002dc <init_tasks_stack>:

void init_tasks_stack(void){
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
	uint32_t *pPSP;

	for(int i = 0; i < MAX_TASKS; i++){
 80002e2:	2300      	movs	r3, #0
 80002e4:	60bb      	str	r3, [r7, #8]
 80002e6:	e032      	b.n	800034e <init_tasks_stack+0x72>
		pPSP = (uint32_t*)psp_of_tasks[i];
 80002e8:	4a1e      	ldr	r2, [pc, #120]	@ (8000364 <init_tasks_stack+0x88>)
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f0:	60fb      	str	r3, [r7, #12]

		pPSP--;
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	3b04      	subs	r3, #4
 80002f6:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //0X01000000
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80002fe:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	3b04      	subs	r3, #4
 8000304:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 8000306:	4a18      	ldr	r2, [pc, #96]	@ (8000368 <init_tasks_stack+0x8c>)
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	3b04      	subs	r3, #4
 8000316:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f06f 0202 	mvn.w	r2, #2
 800031e:	601a      	str	r2, [r3, #0]

		for(int j = 0 ; j < 13 ; j++) //把剩下的R0~R12存0
 8000320:	2300      	movs	r3, #0
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	e008      	b.n	8000338 <init_tasks_stack+0x5c>
		{
			pPSP--;
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	3b04      	subs	r3, #4
 800032a:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < 13 ; j++) //把剩下的R0~R12存0
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	3301      	adds	r3, #1
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2b0c      	cmp	r3, #12
 800033c:	ddf3      	ble.n	8000326 <init_tasks_stack+0x4a>
		}
		psp_of_tasks[i] = (uint32_t)pPSP;
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	4908      	ldr	r1, [pc, #32]	@ (8000364 <init_tasks_stack+0x88>)
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < MAX_TASKS; i++){
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	3301      	adds	r3, #1
 800034c:	60bb      	str	r3, [r7, #8]
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	2b03      	cmp	r3, #3
 8000352:	ddc9      	ble.n	80002e8 <init_tasks_stack+0xc>
	}
}
 8000354:	bf00      	nop
 8000356:	bf00      	nop
 8000358:	3714      	adds	r7, #20
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	20000000 	.word	0x20000000
 8000368:	20000088 	.word	0x20000088

0800036c <enable_processor_faults>:

void enable_processor_faults(void){
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000372:	4b0d      	ldr	r3, [pc, #52]	@ (80003a8 <enable_processor_faults+0x3c>)
 8000374:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16); //mem manage
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17); //bus fault
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18); //usage fault
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	601a      	str	r2, [r3, #0]
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	e000ed24 	.word	0xe000ed24

080003ac <get_psp_value>:


uint32_t get_psp_value(void){
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 80003b0:	4b05      	ldr	r3, [pc, #20]	@ (80003c8 <get_psp_value+0x1c>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	461a      	mov	r2, r3
 80003b6:	4b05      	ldr	r3, [pc, #20]	@ (80003cc <get_psp_value+0x20>)
 80003b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80003bc:	4618      	mov	r0, r3
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	20000098 	.word	0x20000098
 80003cc:	20000000 	.word	0x20000000

080003d0 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void){
	// 1.Initialize the PSP with TASK1 stack start address
	//Get the value of PSP of current task
	asm volatile("PUSH {LR}"); //因為下一個指令要使用BL，會造成原本的LR corrupt，所以先存到stack
 80003d0:	b500      	push	{lr}
	asm volatile("BL get_psp_value"); //不能用B，要用BL(with Link)，因為要回來，回來後current_task會被存在R0
 80003d2:	f7ff ffeb 	bl	80003ac <get_psp_value>
	asm volatile("MSR PSP, R0"); //初始化PSP
 80003d6:	f380 8809 	msr	PSP, r0
	asm volatile("POP {LR}"); //POP原本要回到main的LR
 80003da:	f85d eb04 	ldr.w	lr, [sp], #4

	// 2.Change Change SP to PSP using CONTROL register
	/* CONTROL reg是special reg，要用 MSR，所以要naked*/
	asm volatile("MOV R0,#0x02");
 80003de:	f04f 0002 	mov.w	r0, #2
	asm volatile("MSR CONTROL, R0");
 80003e2:	f380 8814 	msr	CONTROL, r0
	asm volatile("BX LR");
 80003e6:	4770      	bx	lr
}
 80003e8:	bf00      	nop

080003ea <SysTick_Handler>:

void SysTick_Handler(void){
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0

}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr

080003f8 <HardFault_Handler>:

void HardFault_Handler(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 80003fc:	4802      	ldr	r0, [pc, #8]	@ (8000408 <HardFault_Handler+0x10>)
 80003fe:	f000 fa27 	bl	8000850 <puts>
	while(1);
 8000402:	bf00      	nop
 8000404:	e7fd      	b.n	8000402 <HardFault_Handler+0xa>
 8000406:	bf00      	nop
 8000408:	08000fd0 	.word	0x08000fd0

0800040c <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 8000410:	4802      	ldr	r0, [pc, #8]	@ (800041c <MemManage_Handler+0x10>)
 8000412:	f000 fa1d 	bl	8000850 <puts>
	while(1);
 8000416:	bf00      	nop
 8000418:	e7fd      	b.n	8000416 <MemManage_Handler+0xa>
 800041a:	bf00      	nop
 800041c:	08000fe8 	.word	0x08000fe8

08000420 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 8000424:	4802      	ldr	r0, [pc, #8]	@ (8000430 <BusFault_Handler+0x10>)
 8000426:	f000 fa13 	bl	8000850 <puts>
	while(1);
 800042a:	bf00      	nop
 800042c:	e7fd      	b.n	800042a <BusFault_Handler+0xa>
 800042e:	bf00      	nop
 8000430:	08001000 	.word	0x08001000

08000434 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800043e:	4b0f      	ldr	r3, [pc, #60]	@ (800047c <ITM_SendChar+0x48>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a0e      	ldr	r2, [pc, #56]	@ (800047c <ITM_SendChar+0x48>)
 8000444:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000448:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800044a:	4b0d      	ldr	r3, [pc, #52]	@ (8000480 <ITM_SendChar+0x4c>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a0c      	ldr	r2, [pc, #48]	@ (8000480 <ITM_SendChar+0x4c>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000456:	bf00      	nop
 8000458:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	2b00      	cmp	r3, #0
 8000464:	d0f8      	beq.n	8000458 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000466:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	6013      	str	r3, [r2, #0]
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	e000edfc 	.word	0xe000edfc
 8000480:	e0000e00 	.word	0xe0000e00

08000484 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
 8000494:	e00a      	b.n	80004ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000496:	f3af 8000 	nop.w
 800049a:	4601      	mov	r1, r0
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	1c5a      	adds	r2, r3, #1
 80004a0:	60ba      	str	r2, [r7, #8]
 80004a2:	b2ca      	uxtb	r2, r1
 80004a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	3301      	adds	r3, #1
 80004aa:	617b      	str	r3, [r7, #20]
 80004ac:	697a      	ldr	r2, [r7, #20]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	dbf0      	blt.n	8000496 <_read+0x12>
  }

  return len;
 80004b4:	687b      	ldr	r3, [r7, #4]
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	b086      	sub	sp, #24
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	60f8      	str	r0, [r7, #12]
 80004c6:	60b9      	str	r1, [r7, #8]
 80004c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]
 80004ce:	e009      	b.n	80004e4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	1c5a      	adds	r2, r3, #1
 80004d4:	60ba      	str	r2, [r7, #8]
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff ffab 	bl	8000434 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	3301      	adds	r3, #1
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	697a      	ldr	r2, [r7, #20]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	dbf1      	blt.n	80004d0 <_write+0x12>
  }
  return len;
 80004ec:	687b      	ldr	r3, [r7, #4]
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3718      	adds	r7, #24
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <_close>:

int _close(int file)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 8000516:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800051e:	605a      	str	r2, [r3, #4]
  return 0;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <_isatty>:

int _isatty(int file)
{
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000536:	2301      	movs	r3, #1
}
 8000538:	4618      	mov	r0, r3
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
	...

08000560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000568:	4a14      	ldr	r2, [pc, #80]	@ (80005bc <_sbrk+0x5c>)
 800056a:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <_sbrk+0x60>)
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000574:	4b13      	ldr	r3, [pc, #76]	@ (80005c4 <_sbrk+0x64>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d102      	bne.n	8000582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800057c:	4b11      	ldr	r3, [pc, #68]	@ (80005c4 <_sbrk+0x64>)
 800057e:	4a12      	ldr	r2, [pc, #72]	@ (80005c8 <_sbrk+0x68>)
 8000580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000582:	4b10      	ldr	r3, [pc, #64]	@ (80005c4 <_sbrk+0x64>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4413      	add	r3, r2
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	429a      	cmp	r2, r3
 800058e:	d207      	bcs.n	80005a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000590:	f000 fa8c 	bl	8000aac <__errno>
 8000594:	4603      	mov	r3, r0
 8000596:	220c      	movs	r2, #12
 8000598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	e009      	b.n	80005b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005a0:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <_sbrk+0x64>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005a6:	4b07      	ldr	r3, [pc, #28]	@ (80005c4 <_sbrk+0x64>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	4a05      	ldr	r2, [pc, #20]	@ (80005c4 <_sbrk+0x64>)
 80005b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005b2:	68fb      	ldr	r3, [r7, #12]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3718      	adds	r7, #24
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20020000 	.word	0x20020000
 80005c0:	00000400 	.word	0x00000400
 80005c4:	2000009c 	.word	0x2000009c
 80005c8:	200001f0 	.word	0x200001f0

080005cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005cc:	480d      	ldr	r0, [pc, #52]	@ (8000604 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d4:	480c      	ldr	r0, [pc, #48]	@ (8000608 <LoopForever+0x6>)
  ldr r1, =_edata
 80005d6:	490d      	ldr	r1, [pc, #52]	@ (800060c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000610 <LoopForever+0xe>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005dc:	e002      	b.n	80005e4 <LoopCopyDataInit>

080005de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e2:	3304      	adds	r3, #4

080005e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e8:	d3f9      	bcc.n	80005de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000614 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000618 <LoopForever+0x16>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f0:	e001      	b.n	80005f6 <LoopFillZerobss>

080005f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f4:	3204      	adds	r2, #4

080005f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f8:	d3fb      	bcc.n	80005f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005fa:	f000 fa5d 	bl	8000ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fe:	f7ff fde3 	bl	80001c8 <main>

08000602 <LoopForever>:

LoopForever:
  b LoopForever
 8000602:	e7fe      	b.n	8000602 <LoopForever>
  ldr   r0, =_estack
 8000604:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800060c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000610:	08001020 	.word	0x08001020
  ldr r2, =_sbss
 8000614:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000618:	200001ec 	.word	0x200001ec

0800061c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800061c:	e7fe      	b.n	800061c <ADC_IRQHandler>
	...

08000620 <std>:
 8000620:	2300      	movs	r3, #0
 8000622:	b510      	push	{r4, lr}
 8000624:	4604      	mov	r4, r0
 8000626:	e9c0 3300 	strd	r3, r3, [r0]
 800062a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800062e:	6083      	str	r3, [r0, #8]
 8000630:	8181      	strh	r1, [r0, #12]
 8000632:	6643      	str	r3, [r0, #100]	@ 0x64
 8000634:	81c2      	strh	r2, [r0, #14]
 8000636:	6183      	str	r3, [r0, #24]
 8000638:	4619      	mov	r1, r3
 800063a:	2208      	movs	r2, #8
 800063c:	305c      	adds	r0, #92	@ 0x5c
 800063e:	f000 f9e7 	bl	8000a10 <memset>
 8000642:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <std+0x58>)
 8000644:	6263      	str	r3, [r4, #36]	@ 0x24
 8000646:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <std+0x5c>)
 8000648:	62a3      	str	r3, [r4, #40]	@ 0x28
 800064a:	4b0d      	ldr	r3, [pc, #52]	@ (8000680 <std+0x60>)
 800064c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800064e:	4b0d      	ldr	r3, [pc, #52]	@ (8000684 <std+0x64>)
 8000650:	6323      	str	r3, [r4, #48]	@ 0x30
 8000652:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <std+0x68>)
 8000654:	6224      	str	r4, [r4, #32]
 8000656:	429c      	cmp	r4, r3
 8000658:	d006      	beq.n	8000668 <std+0x48>
 800065a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800065e:	4294      	cmp	r4, r2
 8000660:	d002      	beq.n	8000668 <std+0x48>
 8000662:	33d0      	adds	r3, #208	@ 0xd0
 8000664:	429c      	cmp	r4, r3
 8000666:	d105      	bne.n	8000674 <std+0x54>
 8000668:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800066c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000670:	f000 ba46 	b.w	8000b00 <__retarget_lock_init_recursive>
 8000674:	bd10      	pop	{r4, pc}
 8000676:	bf00      	nop
 8000678:	08000861 	.word	0x08000861
 800067c:	08000883 	.word	0x08000883
 8000680:	080008bb 	.word	0x080008bb
 8000684:	080008df 	.word	0x080008df
 8000688:	200000a0 	.word	0x200000a0

0800068c <stdio_exit_handler>:
 800068c:	4a02      	ldr	r2, [pc, #8]	@ (8000698 <stdio_exit_handler+0xc>)
 800068e:	4903      	ldr	r1, [pc, #12]	@ (800069c <stdio_exit_handler+0x10>)
 8000690:	4803      	ldr	r0, [pc, #12]	@ (80006a0 <stdio_exit_handler+0x14>)
 8000692:	f000 b869 	b.w	8000768 <_fwalk_sglue>
 8000696:	bf00      	nop
 8000698:	20000010 	.word	0x20000010
 800069c:	08000e01 	.word	0x08000e01
 80006a0:	20000020 	.word	0x20000020

080006a4 <cleanup_stdio>:
 80006a4:	6841      	ldr	r1, [r0, #4]
 80006a6:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <cleanup_stdio+0x34>)
 80006a8:	4299      	cmp	r1, r3
 80006aa:	b510      	push	{r4, lr}
 80006ac:	4604      	mov	r4, r0
 80006ae:	d001      	beq.n	80006b4 <cleanup_stdio+0x10>
 80006b0:	f000 fba6 	bl	8000e00 <_fflush_r>
 80006b4:	68a1      	ldr	r1, [r4, #8]
 80006b6:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <cleanup_stdio+0x38>)
 80006b8:	4299      	cmp	r1, r3
 80006ba:	d002      	beq.n	80006c2 <cleanup_stdio+0x1e>
 80006bc:	4620      	mov	r0, r4
 80006be:	f000 fb9f 	bl	8000e00 <_fflush_r>
 80006c2:	68e1      	ldr	r1, [r4, #12]
 80006c4:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <cleanup_stdio+0x3c>)
 80006c6:	4299      	cmp	r1, r3
 80006c8:	d004      	beq.n	80006d4 <cleanup_stdio+0x30>
 80006ca:	4620      	mov	r0, r4
 80006cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006d0:	f000 bb96 	b.w	8000e00 <_fflush_r>
 80006d4:	bd10      	pop	{r4, pc}
 80006d6:	bf00      	nop
 80006d8:	200000a0 	.word	0x200000a0
 80006dc:	20000108 	.word	0x20000108
 80006e0:	20000170 	.word	0x20000170

080006e4 <global_stdio_init.part.0>:
 80006e4:	b510      	push	{r4, lr}
 80006e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <global_stdio_init.part.0+0x30>)
 80006e8:	4c0b      	ldr	r4, [pc, #44]	@ (8000718 <global_stdio_init.part.0+0x34>)
 80006ea:	4a0c      	ldr	r2, [pc, #48]	@ (800071c <global_stdio_init.part.0+0x38>)
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	4620      	mov	r0, r4
 80006f0:	2200      	movs	r2, #0
 80006f2:	2104      	movs	r1, #4
 80006f4:	f7ff ff94 	bl	8000620 <std>
 80006f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80006fc:	2201      	movs	r2, #1
 80006fe:	2109      	movs	r1, #9
 8000700:	f7ff ff8e 	bl	8000620 <std>
 8000704:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000708:	2202      	movs	r2, #2
 800070a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800070e:	2112      	movs	r1, #18
 8000710:	f7ff bf86 	b.w	8000620 <std>
 8000714:	200001d8 	.word	0x200001d8
 8000718:	200000a0 	.word	0x200000a0
 800071c:	0800068d 	.word	0x0800068d

08000720 <__sfp_lock_acquire>:
 8000720:	4801      	ldr	r0, [pc, #4]	@ (8000728 <__sfp_lock_acquire+0x8>)
 8000722:	f000 b9ee 	b.w	8000b02 <__retarget_lock_acquire_recursive>
 8000726:	bf00      	nop
 8000728:	200001e1 	.word	0x200001e1

0800072c <__sfp_lock_release>:
 800072c:	4801      	ldr	r0, [pc, #4]	@ (8000734 <__sfp_lock_release+0x8>)
 800072e:	f000 b9e9 	b.w	8000b04 <__retarget_lock_release_recursive>
 8000732:	bf00      	nop
 8000734:	200001e1 	.word	0x200001e1

08000738 <__sinit>:
 8000738:	b510      	push	{r4, lr}
 800073a:	4604      	mov	r4, r0
 800073c:	f7ff fff0 	bl	8000720 <__sfp_lock_acquire>
 8000740:	6a23      	ldr	r3, [r4, #32]
 8000742:	b11b      	cbz	r3, 800074c <__sinit+0x14>
 8000744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000748:	f7ff bff0 	b.w	800072c <__sfp_lock_release>
 800074c:	4b04      	ldr	r3, [pc, #16]	@ (8000760 <__sinit+0x28>)
 800074e:	6223      	str	r3, [r4, #32]
 8000750:	4b04      	ldr	r3, [pc, #16]	@ (8000764 <__sinit+0x2c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1f5      	bne.n	8000744 <__sinit+0xc>
 8000758:	f7ff ffc4 	bl	80006e4 <global_stdio_init.part.0>
 800075c:	e7f2      	b.n	8000744 <__sinit+0xc>
 800075e:	bf00      	nop
 8000760:	080006a5 	.word	0x080006a5
 8000764:	200001d8 	.word	0x200001d8

08000768 <_fwalk_sglue>:
 8000768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800076c:	4607      	mov	r7, r0
 800076e:	4688      	mov	r8, r1
 8000770:	4614      	mov	r4, r2
 8000772:	2600      	movs	r6, #0
 8000774:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000778:	f1b9 0901 	subs.w	r9, r9, #1
 800077c:	d505      	bpl.n	800078a <_fwalk_sglue+0x22>
 800077e:	6824      	ldr	r4, [r4, #0]
 8000780:	2c00      	cmp	r4, #0
 8000782:	d1f7      	bne.n	8000774 <_fwalk_sglue+0xc>
 8000784:	4630      	mov	r0, r6
 8000786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800078a:	89ab      	ldrh	r3, [r5, #12]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d907      	bls.n	80007a0 <_fwalk_sglue+0x38>
 8000790:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000794:	3301      	adds	r3, #1
 8000796:	d003      	beq.n	80007a0 <_fwalk_sglue+0x38>
 8000798:	4629      	mov	r1, r5
 800079a:	4638      	mov	r0, r7
 800079c:	47c0      	blx	r8
 800079e:	4306      	orrs	r6, r0
 80007a0:	3568      	adds	r5, #104	@ 0x68
 80007a2:	e7e9      	b.n	8000778 <_fwalk_sglue+0x10>

080007a4 <_puts_r>:
 80007a4:	6a03      	ldr	r3, [r0, #32]
 80007a6:	b570      	push	{r4, r5, r6, lr}
 80007a8:	6884      	ldr	r4, [r0, #8]
 80007aa:	4605      	mov	r5, r0
 80007ac:	460e      	mov	r6, r1
 80007ae:	b90b      	cbnz	r3, 80007b4 <_puts_r+0x10>
 80007b0:	f7ff ffc2 	bl	8000738 <__sinit>
 80007b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007b6:	07db      	lsls	r3, r3, #31
 80007b8:	d405      	bmi.n	80007c6 <_puts_r+0x22>
 80007ba:	89a3      	ldrh	r3, [r4, #12]
 80007bc:	0598      	lsls	r0, r3, #22
 80007be:	d402      	bmi.n	80007c6 <_puts_r+0x22>
 80007c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007c2:	f000 f99e 	bl	8000b02 <__retarget_lock_acquire_recursive>
 80007c6:	89a3      	ldrh	r3, [r4, #12]
 80007c8:	0719      	lsls	r1, r3, #28
 80007ca:	d502      	bpl.n	80007d2 <_puts_r+0x2e>
 80007cc:	6923      	ldr	r3, [r4, #16]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d135      	bne.n	800083e <_puts_r+0x9a>
 80007d2:	4621      	mov	r1, r4
 80007d4:	4628      	mov	r0, r5
 80007d6:	f000 f8c5 	bl	8000964 <__swsetup_r>
 80007da:	b380      	cbz	r0, 800083e <_puts_r+0x9a>
 80007dc:	f04f 35ff 	mov.w	r5, #4294967295
 80007e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007e2:	07da      	lsls	r2, r3, #31
 80007e4:	d405      	bmi.n	80007f2 <_puts_r+0x4e>
 80007e6:	89a3      	ldrh	r3, [r4, #12]
 80007e8:	059b      	lsls	r3, r3, #22
 80007ea:	d402      	bmi.n	80007f2 <_puts_r+0x4e>
 80007ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007ee:	f000 f989 	bl	8000b04 <__retarget_lock_release_recursive>
 80007f2:	4628      	mov	r0, r5
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	da04      	bge.n	8000804 <_puts_r+0x60>
 80007fa:	69a2      	ldr	r2, [r4, #24]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	dc17      	bgt.n	8000830 <_puts_r+0x8c>
 8000800:	290a      	cmp	r1, #10
 8000802:	d015      	beq.n	8000830 <_puts_r+0x8c>
 8000804:	6823      	ldr	r3, [r4, #0]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	6022      	str	r2, [r4, #0]
 800080a:	7019      	strb	r1, [r3, #0]
 800080c:	68a3      	ldr	r3, [r4, #8]
 800080e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000812:	3b01      	subs	r3, #1
 8000814:	60a3      	str	r3, [r4, #8]
 8000816:	2900      	cmp	r1, #0
 8000818:	d1ed      	bne.n	80007f6 <_puts_r+0x52>
 800081a:	2b00      	cmp	r3, #0
 800081c:	da11      	bge.n	8000842 <_puts_r+0x9e>
 800081e:	4622      	mov	r2, r4
 8000820:	210a      	movs	r1, #10
 8000822:	4628      	mov	r0, r5
 8000824:	f000 f85f 	bl	80008e6 <__swbuf_r>
 8000828:	3001      	adds	r0, #1
 800082a:	d0d7      	beq.n	80007dc <_puts_r+0x38>
 800082c:	250a      	movs	r5, #10
 800082e:	e7d7      	b.n	80007e0 <_puts_r+0x3c>
 8000830:	4622      	mov	r2, r4
 8000832:	4628      	mov	r0, r5
 8000834:	f000 f857 	bl	80008e6 <__swbuf_r>
 8000838:	3001      	adds	r0, #1
 800083a:	d1e7      	bne.n	800080c <_puts_r+0x68>
 800083c:	e7ce      	b.n	80007dc <_puts_r+0x38>
 800083e:	3e01      	subs	r6, #1
 8000840:	e7e4      	b.n	800080c <_puts_r+0x68>
 8000842:	6823      	ldr	r3, [r4, #0]
 8000844:	1c5a      	adds	r2, r3, #1
 8000846:	6022      	str	r2, [r4, #0]
 8000848:	220a      	movs	r2, #10
 800084a:	701a      	strb	r2, [r3, #0]
 800084c:	e7ee      	b.n	800082c <_puts_r+0x88>
	...

08000850 <puts>:
 8000850:	4b02      	ldr	r3, [pc, #8]	@ (800085c <puts+0xc>)
 8000852:	4601      	mov	r1, r0
 8000854:	6818      	ldr	r0, [r3, #0]
 8000856:	f7ff bfa5 	b.w	80007a4 <_puts_r>
 800085a:	bf00      	nop
 800085c:	2000001c 	.word	0x2000001c

08000860 <__sread>:
 8000860:	b510      	push	{r4, lr}
 8000862:	460c      	mov	r4, r1
 8000864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000868:	f000 f8fc 	bl	8000a64 <_read_r>
 800086c:	2800      	cmp	r0, #0
 800086e:	bfab      	itete	ge
 8000870:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000872:	89a3      	ldrhlt	r3, [r4, #12]
 8000874:	181b      	addge	r3, r3, r0
 8000876:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800087a:	bfac      	ite	ge
 800087c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800087e:	81a3      	strhlt	r3, [r4, #12]
 8000880:	bd10      	pop	{r4, pc}

08000882 <__swrite>:
 8000882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000886:	461f      	mov	r7, r3
 8000888:	898b      	ldrh	r3, [r1, #12]
 800088a:	05db      	lsls	r3, r3, #23
 800088c:	4605      	mov	r5, r0
 800088e:	460c      	mov	r4, r1
 8000890:	4616      	mov	r6, r2
 8000892:	d505      	bpl.n	80008a0 <__swrite+0x1e>
 8000894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000898:	2302      	movs	r3, #2
 800089a:	2200      	movs	r2, #0
 800089c:	f000 f8d0 	bl	8000a40 <_lseek_r>
 80008a0:	89a3      	ldrh	r3, [r4, #12]
 80008a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008aa:	81a3      	strh	r3, [r4, #12]
 80008ac:	4632      	mov	r2, r6
 80008ae:	463b      	mov	r3, r7
 80008b0:	4628      	mov	r0, r5
 80008b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008b6:	f000 b8e7 	b.w	8000a88 <_write_r>

080008ba <__sseek>:
 80008ba:	b510      	push	{r4, lr}
 80008bc:	460c      	mov	r4, r1
 80008be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008c2:	f000 f8bd 	bl	8000a40 <_lseek_r>
 80008c6:	1c43      	adds	r3, r0, #1
 80008c8:	89a3      	ldrh	r3, [r4, #12]
 80008ca:	bf15      	itete	ne
 80008cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008d6:	81a3      	strheq	r3, [r4, #12]
 80008d8:	bf18      	it	ne
 80008da:	81a3      	strhne	r3, [r4, #12]
 80008dc:	bd10      	pop	{r4, pc}

080008de <__sclose>:
 80008de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008e2:	f000 b89d 	b.w	8000a20 <_close_r>

080008e6 <__swbuf_r>:
 80008e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008e8:	460e      	mov	r6, r1
 80008ea:	4614      	mov	r4, r2
 80008ec:	4605      	mov	r5, r0
 80008ee:	b118      	cbz	r0, 80008f8 <__swbuf_r+0x12>
 80008f0:	6a03      	ldr	r3, [r0, #32]
 80008f2:	b90b      	cbnz	r3, 80008f8 <__swbuf_r+0x12>
 80008f4:	f7ff ff20 	bl	8000738 <__sinit>
 80008f8:	69a3      	ldr	r3, [r4, #24]
 80008fa:	60a3      	str	r3, [r4, #8]
 80008fc:	89a3      	ldrh	r3, [r4, #12]
 80008fe:	071a      	lsls	r2, r3, #28
 8000900:	d501      	bpl.n	8000906 <__swbuf_r+0x20>
 8000902:	6923      	ldr	r3, [r4, #16]
 8000904:	b943      	cbnz	r3, 8000918 <__swbuf_r+0x32>
 8000906:	4621      	mov	r1, r4
 8000908:	4628      	mov	r0, r5
 800090a:	f000 f82b 	bl	8000964 <__swsetup_r>
 800090e:	b118      	cbz	r0, 8000918 <__swbuf_r+0x32>
 8000910:	f04f 37ff 	mov.w	r7, #4294967295
 8000914:	4638      	mov	r0, r7
 8000916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000918:	6823      	ldr	r3, [r4, #0]
 800091a:	6922      	ldr	r2, [r4, #16]
 800091c:	1a98      	subs	r0, r3, r2
 800091e:	6963      	ldr	r3, [r4, #20]
 8000920:	b2f6      	uxtb	r6, r6
 8000922:	4283      	cmp	r3, r0
 8000924:	4637      	mov	r7, r6
 8000926:	dc05      	bgt.n	8000934 <__swbuf_r+0x4e>
 8000928:	4621      	mov	r1, r4
 800092a:	4628      	mov	r0, r5
 800092c:	f000 fa68 	bl	8000e00 <_fflush_r>
 8000930:	2800      	cmp	r0, #0
 8000932:	d1ed      	bne.n	8000910 <__swbuf_r+0x2a>
 8000934:	68a3      	ldr	r3, [r4, #8]
 8000936:	3b01      	subs	r3, #1
 8000938:	60a3      	str	r3, [r4, #8]
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	1c5a      	adds	r2, r3, #1
 800093e:	6022      	str	r2, [r4, #0]
 8000940:	701e      	strb	r6, [r3, #0]
 8000942:	6962      	ldr	r2, [r4, #20]
 8000944:	1c43      	adds	r3, r0, #1
 8000946:	429a      	cmp	r2, r3
 8000948:	d004      	beq.n	8000954 <__swbuf_r+0x6e>
 800094a:	89a3      	ldrh	r3, [r4, #12]
 800094c:	07db      	lsls	r3, r3, #31
 800094e:	d5e1      	bpl.n	8000914 <__swbuf_r+0x2e>
 8000950:	2e0a      	cmp	r6, #10
 8000952:	d1df      	bne.n	8000914 <__swbuf_r+0x2e>
 8000954:	4621      	mov	r1, r4
 8000956:	4628      	mov	r0, r5
 8000958:	f000 fa52 	bl	8000e00 <_fflush_r>
 800095c:	2800      	cmp	r0, #0
 800095e:	d0d9      	beq.n	8000914 <__swbuf_r+0x2e>
 8000960:	e7d6      	b.n	8000910 <__swbuf_r+0x2a>
	...

08000964 <__swsetup_r>:
 8000964:	b538      	push	{r3, r4, r5, lr}
 8000966:	4b29      	ldr	r3, [pc, #164]	@ (8000a0c <__swsetup_r+0xa8>)
 8000968:	4605      	mov	r5, r0
 800096a:	6818      	ldr	r0, [r3, #0]
 800096c:	460c      	mov	r4, r1
 800096e:	b118      	cbz	r0, 8000978 <__swsetup_r+0x14>
 8000970:	6a03      	ldr	r3, [r0, #32]
 8000972:	b90b      	cbnz	r3, 8000978 <__swsetup_r+0x14>
 8000974:	f7ff fee0 	bl	8000738 <__sinit>
 8000978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800097c:	0719      	lsls	r1, r3, #28
 800097e:	d422      	bmi.n	80009c6 <__swsetup_r+0x62>
 8000980:	06da      	lsls	r2, r3, #27
 8000982:	d407      	bmi.n	8000994 <__swsetup_r+0x30>
 8000984:	2209      	movs	r2, #9
 8000986:	602a      	str	r2, [r5, #0]
 8000988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800098c:	81a3      	strh	r3, [r4, #12]
 800098e:	f04f 30ff 	mov.w	r0, #4294967295
 8000992:	e033      	b.n	80009fc <__swsetup_r+0x98>
 8000994:	0758      	lsls	r0, r3, #29
 8000996:	d512      	bpl.n	80009be <__swsetup_r+0x5a>
 8000998:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800099a:	b141      	cbz	r1, 80009ae <__swsetup_r+0x4a>
 800099c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80009a0:	4299      	cmp	r1, r3
 80009a2:	d002      	beq.n	80009aa <__swsetup_r+0x46>
 80009a4:	4628      	mov	r0, r5
 80009a6:	f000 f8af 	bl	8000b08 <_free_r>
 80009aa:	2300      	movs	r3, #0
 80009ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80009ae:	89a3      	ldrh	r3, [r4, #12]
 80009b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80009b4:	81a3      	strh	r3, [r4, #12]
 80009b6:	2300      	movs	r3, #0
 80009b8:	6063      	str	r3, [r4, #4]
 80009ba:	6923      	ldr	r3, [r4, #16]
 80009bc:	6023      	str	r3, [r4, #0]
 80009be:	89a3      	ldrh	r3, [r4, #12]
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	81a3      	strh	r3, [r4, #12]
 80009c6:	6923      	ldr	r3, [r4, #16]
 80009c8:	b94b      	cbnz	r3, 80009de <__swsetup_r+0x7a>
 80009ca:	89a3      	ldrh	r3, [r4, #12]
 80009cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80009d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80009d4:	d003      	beq.n	80009de <__swsetup_r+0x7a>
 80009d6:	4621      	mov	r1, r4
 80009d8:	4628      	mov	r0, r5
 80009da:	f000 fa5f 	bl	8000e9c <__smakebuf_r>
 80009de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009e2:	f013 0201 	ands.w	r2, r3, #1
 80009e6:	d00a      	beq.n	80009fe <__swsetup_r+0x9a>
 80009e8:	2200      	movs	r2, #0
 80009ea:	60a2      	str	r2, [r4, #8]
 80009ec:	6962      	ldr	r2, [r4, #20]
 80009ee:	4252      	negs	r2, r2
 80009f0:	61a2      	str	r2, [r4, #24]
 80009f2:	6922      	ldr	r2, [r4, #16]
 80009f4:	b942      	cbnz	r2, 8000a08 <__swsetup_r+0xa4>
 80009f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80009fa:	d1c5      	bne.n	8000988 <__swsetup_r+0x24>
 80009fc:	bd38      	pop	{r3, r4, r5, pc}
 80009fe:	0799      	lsls	r1, r3, #30
 8000a00:	bf58      	it	pl
 8000a02:	6962      	ldrpl	r2, [r4, #20]
 8000a04:	60a2      	str	r2, [r4, #8]
 8000a06:	e7f4      	b.n	80009f2 <__swsetup_r+0x8e>
 8000a08:	2000      	movs	r0, #0
 8000a0a:	e7f7      	b.n	80009fc <__swsetup_r+0x98>
 8000a0c:	2000001c 	.word	0x2000001c

08000a10 <memset>:
 8000a10:	4402      	add	r2, r0
 8000a12:	4603      	mov	r3, r0
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d100      	bne.n	8000a1a <memset+0xa>
 8000a18:	4770      	bx	lr
 8000a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8000a1e:	e7f9      	b.n	8000a14 <memset+0x4>

08000a20 <_close_r>:
 8000a20:	b538      	push	{r3, r4, r5, lr}
 8000a22:	4d06      	ldr	r5, [pc, #24]	@ (8000a3c <_close_r+0x1c>)
 8000a24:	2300      	movs	r3, #0
 8000a26:	4604      	mov	r4, r0
 8000a28:	4608      	mov	r0, r1
 8000a2a:	602b      	str	r3, [r5, #0]
 8000a2c:	f7ff fd63 	bl	80004f6 <_close>
 8000a30:	1c43      	adds	r3, r0, #1
 8000a32:	d102      	bne.n	8000a3a <_close_r+0x1a>
 8000a34:	682b      	ldr	r3, [r5, #0]
 8000a36:	b103      	cbz	r3, 8000a3a <_close_r+0x1a>
 8000a38:	6023      	str	r3, [r4, #0]
 8000a3a:	bd38      	pop	{r3, r4, r5, pc}
 8000a3c:	200001dc 	.word	0x200001dc

08000a40 <_lseek_r>:
 8000a40:	b538      	push	{r3, r4, r5, lr}
 8000a42:	4d07      	ldr	r5, [pc, #28]	@ (8000a60 <_lseek_r+0x20>)
 8000a44:	4604      	mov	r4, r0
 8000a46:	4608      	mov	r0, r1
 8000a48:	4611      	mov	r1, r2
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	602a      	str	r2, [r5, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	f7ff fd78 	bl	8000544 <_lseek>
 8000a54:	1c43      	adds	r3, r0, #1
 8000a56:	d102      	bne.n	8000a5e <_lseek_r+0x1e>
 8000a58:	682b      	ldr	r3, [r5, #0]
 8000a5a:	b103      	cbz	r3, 8000a5e <_lseek_r+0x1e>
 8000a5c:	6023      	str	r3, [r4, #0]
 8000a5e:	bd38      	pop	{r3, r4, r5, pc}
 8000a60:	200001dc 	.word	0x200001dc

08000a64 <_read_r>:
 8000a64:	b538      	push	{r3, r4, r5, lr}
 8000a66:	4d07      	ldr	r5, [pc, #28]	@ (8000a84 <_read_r+0x20>)
 8000a68:	4604      	mov	r4, r0
 8000a6a:	4608      	mov	r0, r1
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	2200      	movs	r2, #0
 8000a70:	602a      	str	r2, [r5, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	f7ff fd06 	bl	8000484 <_read>
 8000a78:	1c43      	adds	r3, r0, #1
 8000a7a:	d102      	bne.n	8000a82 <_read_r+0x1e>
 8000a7c:	682b      	ldr	r3, [r5, #0]
 8000a7e:	b103      	cbz	r3, 8000a82 <_read_r+0x1e>
 8000a80:	6023      	str	r3, [r4, #0]
 8000a82:	bd38      	pop	{r3, r4, r5, pc}
 8000a84:	200001dc 	.word	0x200001dc

08000a88 <_write_r>:
 8000a88:	b538      	push	{r3, r4, r5, lr}
 8000a8a:	4d07      	ldr	r5, [pc, #28]	@ (8000aa8 <_write_r+0x20>)
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	4608      	mov	r0, r1
 8000a90:	4611      	mov	r1, r2
 8000a92:	2200      	movs	r2, #0
 8000a94:	602a      	str	r2, [r5, #0]
 8000a96:	461a      	mov	r2, r3
 8000a98:	f7ff fd11 	bl	80004be <_write>
 8000a9c:	1c43      	adds	r3, r0, #1
 8000a9e:	d102      	bne.n	8000aa6 <_write_r+0x1e>
 8000aa0:	682b      	ldr	r3, [r5, #0]
 8000aa2:	b103      	cbz	r3, 8000aa6 <_write_r+0x1e>
 8000aa4:	6023      	str	r3, [r4, #0]
 8000aa6:	bd38      	pop	{r3, r4, r5, pc}
 8000aa8:	200001dc 	.word	0x200001dc

08000aac <__errno>:
 8000aac:	4b01      	ldr	r3, [pc, #4]	@ (8000ab4 <__errno+0x8>)
 8000aae:	6818      	ldr	r0, [r3, #0]
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	2000001c 	.word	0x2000001c

08000ab8 <__libc_init_array>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	4d0d      	ldr	r5, [pc, #52]	@ (8000af0 <__libc_init_array+0x38>)
 8000abc:	4c0d      	ldr	r4, [pc, #52]	@ (8000af4 <__libc_init_array+0x3c>)
 8000abe:	1b64      	subs	r4, r4, r5
 8000ac0:	10a4      	asrs	r4, r4, #2
 8000ac2:	2600      	movs	r6, #0
 8000ac4:	42a6      	cmp	r6, r4
 8000ac6:	d109      	bne.n	8000adc <__libc_init_array+0x24>
 8000ac8:	4d0b      	ldr	r5, [pc, #44]	@ (8000af8 <__libc_init_array+0x40>)
 8000aca:	4c0c      	ldr	r4, [pc, #48]	@ (8000afc <__libc_init_array+0x44>)
 8000acc:	f000 fa54 	bl	8000f78 <_init>
 8000ad0:	1b64      	subs	r4, r4, r5
 8000ad2:	10a4      	asrs	r4, r4, #2
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	42a6      	cmp	r6, r4
 8000ad8:	d105      	bne.n	8000ae6 <__libc_init_array+0x2e>
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
 8000adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae0:	4798      	blx	r3
 8000ae2:	3601      	adds	r6, #1
 8000ae4:	e7ee      	b.n	8000ac4 <__libc_init_array+0xc>
 8000ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aea:	4798      	blx	r3
 8000aec:	3601      	adds	r6, #1
 8000aee:	e7f2      	b.n	8000ad6 <__libc_init_array+0x1e>
 8000af0:	08001018 	.word	0x08001018
 8000af4:	08001018 	.word	0x08001018
 8000af8:	08001018 	.word	0x08001018
 8000afc:	0800101c 	.word	0x0800101c

08000b00 <__retarget_lock_init_recursive>:
 8000b00:	4770      	bx	lr

08000b02 <__retarget_lock_acquire_recursive>:
 8000b02:	4770      	bx	lr

08000b04 <__retarget_lock_release_recursive>:
 8000b04:	4770      	bx	lr
	...

08000b08 <_free_r>:
 8000b08:	b538      	push	{r3, r4, r5, lr}
 8000b0a:	4605      	mov	r5, r0
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	d041      	beq.n	8000b94 <_free_r+0x8c>
 8000b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b14:	1f0c      	subs	r4, r1, #4
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bfb8      	it	lt
 8000b1a:	18e4      	addlt	r4, r4, r3
 8000b1c:	f000 f8e0 	bl	8000ce0 <__malloc_lock>
 8000b20:	4a1d      	ldr	r2, [pc, #116]	@ (8000b98 <_free_r+0x90>)
 8000b22:	6813      	ldr	r3, [r2, #0]
 8000b24:	b933      	cbnz	r3, 8000b34 <_free_r+0x2c>
 8000b26:	6063      	str	r3, [r4, #4]
 8000b28:	6014      	str	r4, [r2, #0]
 8000b2a:	4628      	mov	r0, r5
 8000b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b30:	f000 b8dc 	b.w	8000cec <__malloc_unlock>
 8000b34:	42a3      	cmp	r3, r4
 8000b36:	d908      	bls.n	8000b4a <_free_r+0x42>
 8000b38:	6820      	ldr	r0, [r4, #0]
 8000b3a:	1821      	adds	r1, r4, r0
 8000b3c:	428b      	cmp	r3, r1
 8000b3e:	bf01      	itttt	eq
 8000b40:	6819      	ldreq	r1, [r3, #0]
 8000b42:	685b      	ldreq	r3, [r3, #4]
 8000b44:	1809      	addeq	r1, r1, r0
 8000b46:	6021      	streq	r1, [r4, #0]
 8000b48:	e7ed      	b.n	8000b26 <_free_r+0x1e>
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	b10b      	cbz	r3, 8000b54 <_free_r+0x4c>
 8000b50:	42a3      	cmp	r3, r4
 8000b52:	d9fa      	bls.n	8000b4a <_free_r+0x42>
 8000b54:	6811      	ldr	r1, [r2, #0]
 8000b56:	1850      	adds	r0, r2, r1
 8000b58:	42a0      	cmp	r0, r4
 8000b5a:	d10b      	bne.n	8000b74 <_free_r+0x6c>
 8000b5c:	6820      	ldr	r0, [r4, #0]
 8000b5e:	4401      	add	r1, r0
 8000b60:	1850      	adds	r0, r2, r1
 8000b62:	4283      	cmp	r3, r0
 8000b64:	6011      	str	r1, [r2, #0]
 8000b66:	d1e0      	bne.n	8000b2a <_free_r+0x22>
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	6053      	str	r3, [r2, #4]
 8000b6e:	4408      	add	r0, r1
 8000b70:	6010      	str	r0, [r2, #0]
 8000b72:	e7da      	b.n	8000b2a <_free_r+0x22>
 8000b74:	d902      	bls.n	8000b7c <_free_r+0x74>
 8000b76:	230c      	movs	r3, #12
 8000b78:	602b      	str	r3, [r5, #0]
 8000b7a:	e7d6      	b.n	8000b2a <_free_r+0x22>
 8000b7c:	6820      	ldr	r0, [r4, #0]
 8000b7e:	1821      	adds	r1, r4, r0
 8000b80:	428b      	cmp	r3, r1
 8000b82:	bf04      	itt	eq
 8000b84:	6819      	ldreq	r1, [r3, #0]
 8000b86:	685b      	ldreq	r3, [r3, #4]
 8000b88:	6063      	str	r3, [r4, #4]
 8000b8a:	bf04      	itt	eq
 8000b8c:	1809      	addeq	r1, r1, r0
 8000b8e:	6021      	streq	r1, [r4, #0]
 8000b90:	6054      	str	r4, [r2, #4]
 8000b92:	e7ca      	b.n	8000b2a <_free_r+0x22>
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop
 8000b98:	200001e8 	.word	0x200001e8

08000b9c <sbrk_aligned>:
 8000b9c:	b570      	push	{r4, r5, r6, lr}
 8000b9e:	4e0f      	ldr	r6, [pc, #60]	@ (8000bdc <sbrk_aligned+0x40>)
 8000ba0:	460c      	mov	r4, r1
 8000ba2:	6831      	ldr	r1, [r6, #0]
 8000ba4:	4605      	mov	r5, r0
 8000ba6:	b911      	cbnz	r1, 8000bae <sbrk_aligned+0x12>
 8000ba8:	f000 f9d6 	bl	8000f58 <_sbrk_r>
 8000bac:	6030      	str	r0, [r6, #0]
 8000bae:	4621      	mov	r1, r4
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	f000 f9d1 	bl	8000f58 <_sbrk_r>
 8000bb6:	1c43      	adds	r3, r0, #1
 8000bb8:	d103      	bne.n	8000bc2 <sbrk_aligned+0x26>
 8000bba:	f04f 34ff 	mov.w	r4, #4294967295
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	bd70      	pop	{r4, r5, r6, pc}
 8000bc2:	1cc4      	adds	r4, r0, #3
 8000bc4:	f024 0403 	bic.w	r4, r4, #3
 8000bc8:	42a0      	cmp	r0, r4
 8000bca:	d0f8      	beq.n	8000bbe <sbrk_aligned+0x22>
 8000bcc:	1a21      	subs	r1, r4, r0
 8000bce:	4628      	mov	r0, r5
 8000bd0:	f000 f9c2 	bl	8000f58 <_sbrk_r>
 8000bd4:	3001      	adds	r0, #1
 8000bd6:	d1f2      	bne.n	8000bbe <sbrk_aligned+0x22>
 8000bd8:	e7ef      	b.n	8000bba <sbrk_aligned+0x1e>
 8000bda:	bf00      	nop
 8000bdc:	200001e4 	.word	0x200001e4

08000be0 <_malloc_r>:
 8000be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000be4:	1ccd      	adds	r5, r1, #3
 8000be6:	f025 0503 	bic.w	r5, r5, #3
 8000bea:	3508      	adds	r5, #8
 8000bec:	2d0c      	cmp	r5, #12
 8000bee:	bf38      	it	cc
 8000bf0:	250c      	movcc	r5, #12
 8000bf2:	2d00      	cmp	r5, #0
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	db01      	blt.n	8000bfc <_malloc_r+0x1c>
 8000bf8:	42a9      	cmp	r1, r5
 8000bfa:	d904      	bls.n	8000c06 <_malloc_r+0x26>
 8000bfc:	230c      	movs	r3, #12
 8000bfe:	6033      	str	r3, [r6, #0]
 8000c00:	2000      	movs	r0, #0
 8000c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000cdc <_malloc_r+0xfc>
 8000c0a:	f000 f869 	bl	8000ce0 <__malloc_lock>
 8000c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8000c12:	461c      	mov	r4, r3
 8000c14:	bb44      	cbnz	r4, 8000c68 <_malloc_r+0x88>
 8000c16:	4629      	mov	r1, r5
 8000c18:	4630      	mov	r0, r6
 8000c1a:	f7ff ffbf 	bl	8000b9c <sbrk_aligned>
 8000c1e:	1c43      	adds	r3, r0, #1
 8000c20:	4604      	mov	r4, r0
 8000c22:	d158      	bne.n	8000cd6 <_malloc_r+0xf6>
 8000c24:	f8d8 4000 	ldr.w	r4, [r8]
 8000c28:	4627      	mov	r7, r4
 8000c2a:	2f00      	cmp	r7, #0
 8000c2c:	d143      	bne.n	8000cb6 <_malloc_r+0xd6>
 8000c2e:	2c00      	cmp	r4, #0
 8000c30:	d04b      	beq.n	8000cca <_malloc_r+0xea>
 8000c32:	6823      	ldr	r3, [r4, #0]
 8000c34:	4639      	mov	r1, r7
 8000c36:	4630      	mov	r0, r6
 8000c38:	eb04 0903 	add.w	r9, r4, r3
 8000c3c:	f000 f98c 	bl	8000f58 <_sbrk_r>
 8000c40:	4581      	cmp	r9, r0
 8000c42:	d142      	bne.n	8000cca <_malloc_r+0xea>
 8000c44:	6821      	ldr	r1, [r4, #0]
 8000c46:	1a6d      	subs	r5, r5, r1
 8000c48:	4629      	mov	r1, r5
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	f7ff ffa6 	bl	8000b9c <sbrk_aligned>
 8000c50:	3001      	adds	r0, #1
 8000c52:	d03a      	beq.n	8000cca <_malloc_r+0xea>
 8000c54:	6823      	ldr	r3, [r4, #0]
 8000c56:	442b      	add	r3, r5
 8000c58:	6023      	str	r3, [r4, #0]
 8000c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	bb62      	cbnz	r2, 8000cbc <_malloc_r+0xdc>
 8000c62:	f8c8 7000 	str.w	r7, [r8]
 8000c66:	e00f      	b.n	8000c88 <_malloc_r+0xa8>
 8000c68:	6822      	ldr	r2, [r4, #0]
 8000c6a:	1b52      	subs	r2, r2, r5
 8000c6c:	d420      	bmi.n	8000cb0 <_malloc_r+0xd0>
 8000c6e:	2a0b      	cmp	r2, #11
 8000c70:	d917      	bls.n	8000ca2 <_malloc_r+0xc2>
 8000c72:	1961      	adds	r1, r4, r5
 8000c74:	42a3      	cmp	r3, r4
 8000c76:	6025      	str	r5, [r4, #0]
 8000c78:	bf18      	it	ne
 8000c7a:	6059      	strne	r1, [r3, #4]
 8000c7c:	6863      	ldr	r3, [r4, #4]
 8000c7e:	bf08      	it	eq
 8000c80:	f8c8 1000 	streq.w	r1, [r8]
 8000c84:	5162      	str	r2, [r4, r5]
 8000c86:	604b      	str	r3, [r1, #4]
 8000c88:	4630      	mov	r0, r6
 8000c8a:	f000 f82f 	bl	8000cec <__malloc_unlock>
 8000c8e:	f104 000b 	add.w	r0, r4, #11
 8000c92:	1d23      	adds	r3, r4, #4
 8000c94:	f020 0007 	bic.w	r0, r0, #7
 8000c98:	1ac2      	subs	r2, r0, r3
 8000c9a:	bf1c      	itt	ne
 8000c9c:	1a1b      	subne	r3, r3, r0
 8000c9e:	50a3      	strne	r3, [r4, r2]
 8000ca0:	e7af      	b.n	8000c02 <_malloc_r+0x22>
 8000ca2:	6862      	ldr	r2, [r4, #4]
 8000ca4:	42a3      	cmp	r3, r4
 8000ca6:	bf0c      	ite	eq
 8000ca8:	f8c8 2000 	streq.w	r2, [r8]
 8000cac:	605a      	strne	r2, [r3, #4]
 8000cae:	e7eb      	b.n	8000c88 <_malloc_r+0xa8>
 8000cb0:	4623      	mov	r3, r4
 8000cb2:	6864      	ldr	r4, [r4, #4]
 8000cb4:	e7ae      	b.n	8000c14 <_malloc_r+0x34>
 8000cb6:	463c      	mov	r4, r7
 8000cb8:	687f      	ldr	r7, [r7, #4]
 8000cba:	e7b6      	b.n	8000c2a <_malloc_r+0x4a>
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	42a3      	cmp	r3, r4
 8000cc2:	d1fb      	bne.n	8000cbc <_malloc_r+0xdc>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	6053      	str	r3, [r2, #4]
 8000cc8:	e7de      	b.n	8000c88 <_malloc_r+0xa8>
 8000cca:	230c      	movs	r3, #12
 8000ccc:	6033      	str	r3, [r6, #0]
 8000cce:	4630      	mov	r0, r6
 8000cd0:	f000 f80c 	bl	8000cec <__malloc_unlock>
 8000cd4:	e794      	b.n	8000c00 <_malloc_r+0x20>
 8000cd6:	6005      	str	r5, [r0, #0]
 8000cd8:	e7d6      	b.n	8000c88 <_malloc_r+0xa8>
 8000cda:	bf00      	nop
 8000cdc:	200001e8 	.word	0x200001e8

08000ce0 <__malloc_lock>:
 8000ce0:	4801      	ldr	r0, [pc, #4]	@ (8000ce8 <__malloc_lock+0x8>)
 8000ce2:	f7ff bf0e 	b.w	8000b02 <__retarget_lock_acquire_recursive>
 8000ce6:	bf00      	nop
 8000ce8:	200001e0 	.word	0x200001e0

08000cec <__malloc_unlock>:
 8000cec:	4801      	ldr	r0, [pc, #4]	@ (8000cf4 <__malloc_unlock+0x8>)
 8000cee:	f7ff bf09 	b.w	8000b04 <__retarget_lock_release_recursive>
 8000cf2:	bf00      	nop
 8000cf4:	200001e0 	.word	0x200001e0

08000cf8 <__sflush_r>:
 8000cf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d00:	0716      	lsls	r6, r2, #28
 8000d02:	4605      	mov	r5, r0
 8000d04:	460c      	mov	r4, r1
 8000d06:	d454      	bmi.n	8000db2 <__sflush_r+0xba>
 8000d08:	684b      	ldr	r3, [r1, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	dc02      	bgt.n	8000d14 <__sflush_r+0x1c>
 8000d0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	dd48      	ble.n	8000da6 <__sflush_r+0xae>
 8000d14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d045      	beq.n	8000da6 <__sflush_r+0xae>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000d20:	682f      	ldr	r7, [r5, #0]
 8000d22:	6a21      	ldr	r1, [r4, #32]
 8000d24:	602b      	str	r3, [r5, #0]
 8000d26:	d030      	beq.n	8000d8a <__sflush_r+0x92>
 8000d28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000d2a:	89a3      	ldrh	r3, [r4, #12]
 8000d2c:	0759      	lsls	r1, r3, #29
 8000d2e:	d505      	bpl.n	8000d3c <__sflush_r+0x44>
 8000d30:	6863      	ldr	r3, [r4, #4]
 8000d32:	1ad2      	subs	r2, r2, r3
 8000d34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000d36:	b10b      	cbz	r3, 8000d3c <__sflush_r+0x44>
 8000d38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d3a:	1ad2      	subs	r2, r2, r3
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000d40:	6a21      	ldr	r1, [r4, #32]
 8000d42:	4628      	mov	r0, r5
 8000d44:	47b0      	blx	r6
 8000d46:	1c43      	adds	r3, r0, #1
 8000d48:	89a3      	ldrh	r3, [r4, #12]
 8000d4a:	d106      	bne.n	8000d5a <__sflush_r+0x62>
 8000d4c:	6829      	ldr	r1, [r5, #0]
 8000d4e:	291d      	cmp	r1, #29
 8000d50:	d82b      	bhi.n	8000daa <__sflush_r+0xb2>
 8000d52:	4a2a      	ldr	r2, [pc, #168]	@ (8000dfc <__sflush_r+0x104>)
 8000d54:	410a      	asrs	r2, r1
 8000d56:	07d6      	lsls	r6, r2, #31
 8000d58:	d427      	bmi.n	8000daa <__sflush_r+0xb2>
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	6062      	str	r2, [r4, #4]
 8000d5e:	04d9      	lsls	r1, r3, #19
 8000d60:	6922      	ldr	r2, [r4, #16]
 8000d62:	6022      	str	r2, [r4, #0]
 8000d64:	d504      	bpl.n	8000d70 <__sflush_r+0x78>
 8000d66:	1c42      	adds	r2, r0, #1
 8000d68:	d101      	bne.n	8000d6e <__sflush_r+0x76>
 8000d6a:	682b      	ldr	r3, [r5, #0]
 8000d6c:	b903      	cbnz	r3, 8000d70 <__sflush_r+0x78>
 8000d6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8000d70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000d72:	602f      	str	r7, [r5, #0]
 8000d74:	b1b9      	cbz	r1, 8000da6 <__sflush_r+0xae>
 8000d76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	d002      	beq.n	8000d84 <__sflush_r+0x8c>
 8000d7e:	4628      	mov	r0, r5
 8000d80:	f7ff fec2 	bl	8000b08 <_free_r>
 8000d84:	2300      	movs	r3, #0
 8000d86:	6363      	str	r3, [r4, #52]	@ 0x34
 8000d88:	e00d      	b.n	8000da6 <__sflush_r+0xae>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	4628      	mov	r0, r5
 8000d8e:	47b0      	blx	r6
 8000d90:	4602      	mov	r2, r0
 8000d92:	1c50      	adds	r0, r2, #1
 8000d94:	d1c9      	bne.n	8000d2a <__sflush_r+0x32>
 8000d96:	682b      	ldr	r3, [r5, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0c6      	beq.n	8000d2a <__sflush_r+0x32>
 8000d9c:	2b1d      	cmp	r3, #29
 8000d9e:	d001      	beq.n	8000da4 <__sflush_r+0xac>
 8000da0:	2b16      	cmp	r3, #22
 8000da2:	d11e      	bne.n	8000de2 <__sflush_r+0xea>
 8000da4:	602f      	str	r7, [r5, #0]
 8000da6:	2000      	movs	r0, #0
 8000da8:	e022      	b.n	8000df0 <__sflush_r+0xf8>
 8000daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	e01b      	b.n	8000dea <__sflush_r+0xf2>
 8000db2:	690f      	ldr	r7, [r1, #16]
 8000db4:	2f00      	cmp	r7, #0
 8000db6:	d0f6      	beq.n	8000da6 <__sflush_r+0xae>
 8000db8:	0793      	lsls	r3, r2, #30
 8000dba:	680e      	ldr	r6, [r1, #0]
 8000dbc:	bf08      	it	eq
 8000dbe:	694b      	ldreq	r3, [r1, #20]
 8000dc0:	600f      	str	r7, [r1, #0]
 8000dc2:	bf18      	it	ne
 8000dc4:	2300      	movne	r3, #0
 8000dc6:	eba6 0807 	sub.w	r8, r6, r7
 8000dca:	608b      	str	r3, [r1, #8]
 8000dcc:	f1b8 0f00 	cmp.w	r8, #0
 8000dd0:	dde9      	ble.n	8000da6 <__sflush_r+0xae>
 8000dd2:	6a21      	ldr	r1, [r4, #32]
 8000dd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000dd6:	4643      	mov	r3, r8
 8000dd8:	463a      	mov	r2, r7
 8000dda:	4628      	mov	r0, r5
 8000ddc:	47b0      	blx	r6
 8000dde:	2800      	cmp	r0, #0
 8000de0:	dc08      	bgt.n	8000df4 <__sflush_r+0xfc>
 8000de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dea:	81a3      	strh	r3, [r4, #12]
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000df4:	4407      	add	r7, r0
 8000df6:	eba8 0800 	sub.w	r8, r8, r0
 8000dfa:	e7e7      	b.n	8000dcc <__sflush_r+0xd4>
 8000dfc:	dfbffffe 	.word	0xdfbffffe

08000e00 <_fflush_r>:
 8000e00:	b538      	push	{r3, r4, r5, lr}
 8000e02:	690b      	ldr	r3, [r1, #16]
 8000e04:	4605      	mov	r5, r0
 8000e06:	460c      	mov	r4, r1
 8000e08:	b913      	cbnz	r3, 8000e10 <_fflush_r+0x10>
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	bd38      	pop	{r3, r4, r5, pc}
 8000e10:	b118      	cbz	r0, 8000e1a <_fflush_r+0x1a>
 8000e12:	6a03      	ldr	r3, [r0, #32]
 8000e14:	b90b      	cbnz	r3, 8000e1a <_fflush_r+0x1a>
 8000e16:	f7ff fc8f 	bl	8000738 <__sinit>
 8000e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0f3      	beq.n	8000e0a <_fflush_r+0xa>
 8000e22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000e24:	07d0      	lsls	r0, r2, #31
 8000e26:	d404      	bmi.n	8000e32 <_fflush_r+0x32>
 8000e28:	0599      	lsls	r1, r3, #22
 8000e2a:	d402      	bmi.n	8000e32 <_fflush_r+0x32>
 8000e2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e2e:	f7ff fe68 	bl	8000b02 <__retarget_lock_acquire_recursive>
 8000e32:	4628      	mov	r0, r5
 8000e34:	4621      	mov	r1, r4
 8000e36:	f7ff ff5f 	bl	8000cf8 <__sflush_r>
 8000e3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000e3c:	07da      	lsls	r2, r3, #31
 8000e3e:	4605      	mov	r5, r0
 8000e40:	d4e4      	bmi.n	8000e0c <_fflush_r+0xc>
 8000e42:	89a3      	ldrh	r3, [r4, #12]
 8000e44:	059b      	lsls	r3, r3, #22
 8000e46:	d4e1      	bmi.n	8000e0c <_fflush_r+0xc>
 8000e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e4a:	f7ff fe5b 	bl	8000b04 <__retarget_lock_release_recursive>
 8000e4e:	e7dd      	b.n	8000e0c <_fflush_r+0xc>

08000e50 <__swhatbuf_r>:
 8000e50:	b570      	push	{r4, r5, r6, lr}
 8000e52:	460c      	mov	r4, r1
 8000e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	b096      	sub	sp, #88	@ 0x58
 8000e5c:	4615      	mov	r5, r2
 8000e5e:	461e      	mov	r6, r3
 8000e60:	da0d      	bge.n	8000e7e <__swhatbuf_r+0x2e>
 8000e62:	89a3      	ldrh	r3, [r4, #12]
 8000e64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000e68:	f04f 0100 	mov.w	r1, #0
 8000e6c:	bf14      	ite	ne
 8000e6e:	2340      	movne	r3, #64	@ 0x40
 8000e70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000e74:	2000      	movs	r0, #0
 8000e76:	6031      	str	r1, [r6, #0]
 8000e78:	602b      	str	r3, [r5, #0]
 8000e7a:	b016      	add	sp, #88	@ 0x58
 8000e7c:	bd70      	pop	{r4, r5, r6, pc}
 8000e7e:	466a      	mov	r2, sp
 8000e80:	f000 f848 	bl	8000f14 <_fstat_r>
 8000e84:	2800      	cmp	r0, #0
 8000e86:	dbec      	blt.n	8000e62 <__swhatbuf_r+0x12>
 8000e88:	9901      	ldr	r1, [sp, #4]
 8000e8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000e8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000e92:	4259      	negs	r1, r3
 8000e94:	4159      	adcs	r1, r3
 8000e96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e9a:	e7eb      	b.n	8000e74 <__swhatbuf_r+0x24>

08000e9c <__smakebuf_r>:
 8000e9c:	898b      	ldrh	r3, [r1, #12]
 8000e9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ea0:	079d      	lsls	r5, r3, #30
 8000ea2:	4606      	mov	r6, r0
 8000ea4:	460c      	mov	r4, r1
 8000ea6:	d507      	bpl.n	8000eb8 <__smakebuf_r+0x1c>
 8000ea8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000eac:	6023      	str	r3, [r4, #0]
 8000eae:	6123      	str	r3, [r4, #16]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	6163      	str	r3, [r4, #20]
 8000eb4:	b003      	add	sp, #12
 8000eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb8:	ab01      	add	r3, sp, #4
 8000eba:	466a      	mov	r2, sp
 8000ebc:	f7ff ffc8 	bl	8000e50 <__swhatbuf_r>
 8000ec0:	9f00      	ldr	r7, [sp, #0]
 8000ec2:	4605      	mov	r5, r0
 8000ec4:	4639      	mov	r1, r7
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	f7ff fe8a 	bl	8000be0 <_malloc_r>
 8000ecc:	b948      	cbnz	r0, 8000ee2 <__smakebuf_r+0x46>
 8000ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ed2:	059a      	lsls	r2, r3, #22
 8000ed4:	d4ee      	bmi.n	8000eb4 <__smakebuf_r+0x18>
 8000ed6:	f023 0303 	bic.w	r3, r3, #3
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	81a3      	strh	r3, [r4, #12]
 8000ee0:	e7e2      	b.n	8000ea8 <__smakebuf_r+0xc>
 8000ee2:	89a3      	ldrh	r3, [r4, #12]
 8000ee4:	6020      	str	r0, [r4, #0]
 8000ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eea:	81a3      	strh	r3, [r4, #12]
 8000eec:	9b01      	ldr	r3, [sp, #4]
 8000eee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000ef2:	b15b      	cbz	r3, 8000f0c <__smakebuf_r+0x70>
 8000ef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ef8:	4630      	mov	r0, r6
 8000efa:	f000 f81d 	bl	8000f38 <_isatty_r>
 8000efe:	b128      	cbz	r0, 8000f0c <__smakebuf_r+0x70>
 8000f00:	89a3      	ldrh	r3, [r4, #12]
 8000f02:	f023 0303 	bic.w	r3, r3, #3
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	81a3      	strh	r3, [r4, #12]
 8000f0c:	89a3      	ldrh	r3, [r4, #12]
 8000f0e:	431d      	orrs	r5, r3
 8000f10:	81a5      	strh	r5, [r4, #12]
 8000f12:	e7cf      	b.n	8000eb4 <__smakebuf_r+0x18>

08000f14 <_fstat_r>:
 8000f14:	b538      	push	{r3, r4, r5, lr}
 8000f16:	4d07      	ldr	r5, [pc, #28]	@ (8000f34 <_fstat_r+0x20>)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	4604      	mov	r4, r0
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	4611      	mov	r1, r2
 8000f20:	602b      	str	r3, [r5, #0]
 8000f22:	f7ff faf4 	bl	800050e <_fstat>
 8000f26:	1c43      	adds	r3, r0, #1
 8000f28:	d102      	bne.n	8000f30 <_fstat_r+0x1c>
 8000f2a:	682b      	ldr	r3, [r5, #0]
 8000f2c:	b103      	cbz	r3, 8000f30 <_fstat_r+0x1c>
 8000f2e:	6023      	str	r3, [r4, #0]
 8000f30:	bd38      	pop	{r3, r4, r5, pc}
 8000f32:	bf00      	nop
 8000f34:	200001dc 	.word	0x200001dc

08000f38 <_isatty_r>:
 8000f38:	b538      	push	{r3, r4, r5, lr}
 8000f3a:	4d06      	ldr	r5, [pc, #24]	@ (8000f54 <_isatty_r+0x1c>)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	4604      	mov	r4, r0
 8000f40:	4608      	mov	r0, r1
 8000f42:	602b      	str	r3, [r5, #0]
 8000f44:	f7ff faf3 	bl	800052e <_isatty>
 8000f48:	1c43      	adds	r3, r0, #1
 8000f4a:	d102      	bne.n	8000f52 <_isatty_r+0x1a>
 8000f4c:	682b      	ldr	r3, [r5, #0]
 8000f4e:	b103      	cbz	r3, 8000f52 <_isatty_r+0x1a>
 8000f50:	6023      	str	r3, [r4, #0]
 8000f52:	bd38      	pop	{r3, r4, r5, pc}
 8000f54:	200001dc 	.word	0x200001dc

08000f58 <_sbrk_r>:
 8000f58:	b538      	push	{r3, r4, r5, lr}
 8000f5a:	4d06      	ldr	r5, [pc, #24]	@ (8000f74 <_sbrk_r+0x1c>)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	4604      	mov	r4, r0
 8000f60:	4608      	mov	r0, r1
 8000f62:	602b      	str	r3, [r5, #0]
 8000f64:	f7ff fafc 	bl	8000560 <_sbrk>
 8000f68:	1c43      	adds	r3, r0, #1
 8000f6a:	d102      	bne.n	8000f72 <_sbrk_r+0x1a>
 8000f6c:	682b      	ldr	r3, [r5, #0]
 8000f6e:	b103      	cbz	r3, 8000f72 <_sbrk_r+0x1a>
 8000f70:	6023      	str	r3, [r4, #0]
 8000f72:	bd38      	pop	{r3, r4, r5, pc}
 8000f74:	200001dc 	.word	0x200001dc

08000f78 <_init>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	bf00      	nop
 8000f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7e:	bc08      	pop	{r3}
 8000f80:	469e      	mov	lr, r3
 8000f82:	4770      	bx	lr

08000f84 <_fini>:
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	bf00      	nop
 8000f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f8a:	bc08      	pop	{r3}
 8000f8c:	469e      	mov	lr, r3
 8000f8e:	4770      	bx	lr
