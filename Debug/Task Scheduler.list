
Task Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d44  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000ecc  08000ecc  00001ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f0c  08000f0c  0000206c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f0c  08000f0c  0000206c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f0c  08000f0c  0000206c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f0c  08000f0c  00001f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f10  08000f10  00001f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08000f14  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000206c  2**0
                  CONTENTS
 10 .bss          0000017c  2000006c  2000006c  0000206c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e8  200001e8  0000206c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a5f  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003a6  00000000  00000000  00002afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  00002ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000ef  00000000  00000000  00003000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d3d  00000000  00000000  000030ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015bb  00000000  00000000  00005e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009a4a  00000000  00000000  000073e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010e31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ac0  00000000  00000000  00010e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  00011934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000eb4 	.word	0x08000eb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	08000eb4 	.word	0x08000eb4

080001c8 <main>:

uint32_t psp_of_tasks[MAX_TASKS] = {T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START};
uint32_t task_handlers[MAX_TASKS];

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	init_scheduler_stack(SCHED_STACK_START); //初始化MSP
 80001cc:	480b      	ldr	r0, [pc, #44]	@ (80001fc <main+0x34>)
 80001ce:	f000 f879 	bl	80002c4 <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler; //不同task handler的位址
 80001d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000200 <main+0x38>)
 80001d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000204 <main+0x3c>)
 80001d6:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 80001d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000208 <main+0x40>)
 80001da:	4b0a      	ldr	r3, [pc, #40]	@ (8000204 <main+0x3c>)
 80001dc:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 80001de:	4a0b      	ldr	r2, [pc, #44]	@ (800020c <main+0x44>)
 80001e0:	4b08      	ldr	r3, [pc, #32]	@ (8000204 <main+0x3c>)
 80001e2:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 80001e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000210 <main+0x48>)
 80001e6:	4b07      	ldr	r3, [pc, #28]	@ (8000204 <main+0x3c>)
 80001e8:	60da      	str	r2, [r3, #12]

	init_tasks_stack();
 80001ea:	f000 f871 	bl	80002d0 <init_tasks_stack>

	init_systick_timer(TICK_HZ);
 80001ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001f2:	f000 f82f 	bl	8000254 <init_systick_timer>
    /* Loop forever */
	for(;;);
 80001f6:	bf00      	nop
 80001f8:	e7fd      	b.n	80001f6 <main+0x2e>
 80001fa:	bf00      	nop
 80001fc:	2001f000 	.word	0x2001f000
 8000200:	08000215 	.word	0x08000215
 8000204:	20000088 	.word	0x20000088
 8000208:	08000225 	.word	0x08000225
 800020c:	08000235 	.word	0x08000235
 8000210:	08000245 	.word	0x08000245

08000214 <task1_handler>:
}

void task1_handler(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task1\n");
 8000218:	4801      	ldr	r0, [pc, #4]	@ (8000220 <task1_handler+0xc>)
 800021a:	f000 fab7 	bl	800078c <puts>
 800021e:	e7fb      	b.n	8000218 <task1_handler+0x4>
 8000220:	08000ecc 	.word	0x08000ecc

08000224 <task2_handler>:
	}
}

void task2_handler(void){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task2\n");
 8000228:	4801      	ldr	r0, [pc, #4]	@ (8000230 <task2_handler+0xc>)
 800022a:	f000 faaf 	bl	800078c <puts>
 800022e:	e7fb      	b.n	8000228 <task2_handler+0x4>
 8000230:	08000edc 	.word	0x08000edc

08000234 <task3_handler>:
	}
}

void task3_handler(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task3\n");
 8000238:	4801      	ldr	r0, [pc, #4]	@ (8000240 <task3_handler+0xc>)
 800023a:	f000 faa7 	bl	800078c <puts>
 800023e:	e7fb      	b.n	8000238 <task3_handler+0x4>
 8000240:	08000eec 	.word	0x08000eec

08000244 <task4_handler>:
	}
}

void task4_handler(void){
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task4\n");
 8000248:	4801      	ldr	r0, [pc, #4]	@ (8000250 <task4_handler+0xc>)
 800024a:	f000 fa9f 	bl	800078c <puts>
 800024e:	e7fb      	b.n	8000248 <task4_handler+0x4>
 8000250:	08000efc 	.word	0x08000efc

08000254 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz){
 8000254:	b480      	push	{r7}
 8000256:	b087      	sub	sp, #28
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 800025c:	4b16      	ldr	r3, [pc, #88]	@ (80002b8 <init_systick_timer+0x64>)
 800025e:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000260:	4b16      	ldr	r3, [pc, #88]	@ (80002bc <init_systick_timer+0x68>)
 8000262:	613b      	str	r3, [r7, #16]
	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;
 8000264:	4a16      	ldr	r2, [pc, #88]	@ (80002c0 <init_systick_timer+0x6c>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	fbb2 f3f3 	udiv	r3, r2, r3
 800026c:	3b01      	subs	r3, #1
 800026e:	60fb      	str	r3, [r7, #12]

	//Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFF);
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	601a      	str	r2, [r3, #0]

	//Load the value of SVR
	*pSRVR |= count_value;
 800027c:	697b      	ldr	r3, [r7, #20]
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	431a      	orrs	r2, r3
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	601a      	str	r2, [r3, #0]

	//Do some setting
	*pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 8000288:	693b      	ldr	r3, [r7, #16]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f043 0202 	orr.w	r2, r3, #2
 8000290:	693b      	ldr	r3, [r7, #16]
 8000292:	601a      	str	r2, [r3, #0]
	*pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 8000294:	693b      	ldr	r3, [r7, #16]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f043 0204 	orr.w	r2, r3, #4
 800029c:	693b      	ldr	r3, [r7, #16]
 800029e:	601a      	str	r2, [r3, #0]

	//Enable the systick
	*pSCSR |= ( 1 << 0); //enables the counter
 80002a0:	693b      	ldr	r3, [r7, #16]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f043 0201 	orr.w	r2, r3, #1
 80002a8:	693b      	ldr	r3, [r7, #16]
 80002aa:	601a      	str	r2, [r3, #0]
}
 80002ac:	bf00      	nop
 80002ae:	371c      	adds	r7, #28
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	e000e014 	.word	0xe000e014
 80002bc:	e000e010 	.word	0xe000e010
 80002c0:	00f42400 	.word	0x00f42400

080002c4 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_stack){
 80002c4:	4603      	mov	r3, r0
	asm volatile("MSR MSP,%0"::"r"(sched_top_stack):);
 80002c6:	f383 8808 	msr	MSP, r3
	//volatile("MSR MSP,R0"); 也可以用這個指令
	asm volatile("BX LR");
 80002ca:	4770      	bx	lr
}
 80002cc:	bf00      	nop
	...

080002d0 <init_tasks_stack>:

void init_tasks_stack(void){
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
	uint32_t *pPSP;

	for(int i = 0; i < MAX_TASKS; i++){
 80002d6:	2300      	movs	r3, #0
 80002d8:	60bb      	str	r3, [r7, #8]
 80002da:	e032      	b.n	8000342 <init_tasks_stack+0x72>
		pPSP = (uint32_t*)psp_of_tasks[i];
 80002dc:	4a1e      	ldr	r2, [pc, #120]	@ (8000358 <init_tasks_stack+0x88>)
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e4:	60fb      	str	r3, [r7, #12]

		pPSP--;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	3b04      	subs	r3, #4
 80002ea:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //0X01000000
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80002f2:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	3b04      	subs	r3, #4
 80002f8:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 80002fa:	4a18      	ldr	r2, [pc, #96]	@ (800035c <init_tasks_stack+0x8c>)
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	3b04      	subs	r3, #4
 800030a:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f06f 0202 	mvn.w	r2, #2
 8000312:	601a      	str	r2, [r3, #0]

		for(int j = 0 ; j < 13 ; j++) //把剩下的R0~R12存0
 8000314:	2300      	movs	r3, #0
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	e008      	b.n	800032c <init_tasks_stack+0x5c>
		{
			pPSP--;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	3b04      	subs	r3, #4
 800031e:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < 13 ; j++) //把剩下的R0~R12存0
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	3301      	adds	r3, #1
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2b0c      	cmp	r3, #12
 8000330:	ddf3      	ble.n	800031a <init_tasks_stack+0x4a>
		}
		psp_of_tasks[i] = (uint32_t)pPSP;
 8000332:	68fa      	ldr	r2, [r7, #12]
 8000334:	4908      	ldr	r1, [pc, #32]	@ (8000358 <init_tasks_stack+0x88>)
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < MAX_TASKS; i++){
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	3301      	adds	r3, #1
 8000340:	60bb      	str	r3, [r7, #8]
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	2b03      	cmp	r3, #3
 8000346:	ddc9      	ble.n	80002dc <init_tasks_stack+0xc>
	}
}
 8000348:	bf00      	nop
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	20000000 	.word	0x20000000
 800035c:	20000088 	.word	0x20000088

08000360 <SysTick_Handler>:

void SysTick_Handler(void){
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0

}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
	...

08000370 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800037a:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <ITM_SendChar+0x48>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a0e      	ldr	r2, [pc, #56]	@ (80003b8 <ITM_SendChar+0x48>)
 8000380:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000384:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000386:	4b0d      	ldr	r3, [pc, #52]	@ (80003bc <ITM_SendChar+0x4c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a0c      	ldr	r2, [pc, #48]	@ (80003bc <ITM_SendChar+0x4c>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000392:	bf00      	nop
 8000394:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0f8      	beq.n	8000394 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80003a2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	6013      	str	r3, [r2, #0]
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	e000edfc 	.word	0xe000edfc
 80003bc:	e0000e00 	.word	0xe0000e00

080003c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
 80003d0:	e00a      	b.n	80003e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003d2:	f3af 8000 	nop.w
 80003d6:	4601      	mov	r1, r0
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	1c5a      	adds	r2, r3, #1
 80003dc:	60ba      	str	r2, [r7, #8]
 80003de:	b2ca      	uxtb	r2, r1
 80003e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	3301      	adds	r3, #1
 80003e6:	617b      	str	r3, [r7, #20]
 80003e8:	697a      	ldr	r2, [r7, #20]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	dbf0      	blt.n	80003d2 <_read+0x12>
  }

  return len;
 80003f0:	687b      	ldr	r3, [r7, #4]
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3718      	adds	r7, #24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b086      	sub	sp, #24
 80003fe:	af00      	add	r7, sp, #0
 8000400:	60f8      	str	r0, [r7, #12]
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000406:	2300      	movs	r3, #0
 8000408:	617b      	str	r3, [r7, #20]
 800040a:	e009      	b.n	8000420 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	1c5a      	adds	r2, r3, #1
 8000410:	60ba      	str	r2, [r7, #8]
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff ffab 	bl	8000370 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	3301      	adds	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
 8000420:	697a      	ldr	r2, [r7, #20]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	429a      	cmp	r2, r3
 8000426:	dbf1      	blt.n	800040c <_write+0x12>
  }
  return len;
 8000428:	687b      	ldr	r3, [r7, #4]
}
 800042a:	4618      	mov	r0, r3
 800042c:	3718      	adds	r7, #24
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <_close>:

int _close(int file)
{
 8000432:	b480      	push	{r7}
 8000434:	b083      	sub	sp, #12
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800043a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800043e:	4618      	mov	r0, r3
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr

0800044a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800044a:	b480      	push	{r7}
 800044c:	b083      	sub	sp, #12
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
 8000452:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800045a:	605a      	str	r2, [r3, #4]
  return 0;
 800045c:	2300      	movs	r3, #0
}
 800045e:	4618      	mov	r0, r3
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr

0800046a <_isatty>:

int _isatty(int file)
{
 800046a:	b480      	push	{r7}
 800046c:	b083      	sub	sp, #12
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000472:	2301      	movs	r3, #1
}
 8000474:	4618      	mov	r0, r3
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	60f8      	str	r0, [r7, #12]
 8000488:	60b9      	str	r1, [r7, #8]
 800048a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800048c:	2300      	movs	r3, #0
}
 800048e:	4618      	mov	r0, r3
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
	...

0800049c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004a4:	4a14      	ldr	r2, [pc, #80]	@ (80004f8 <_sbrk+0x5c>)
 80004a6:	4b15      	ldr	r3, [pc, #84]	@ (80004fc <_sbrk+0x60>)
 80004a8:	1ad3      	subs	r3, r2, r3
 80004aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004b0:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <_sbrk+0x64>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d102      	bne.n	80004be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004b8:	4b11      	ldr	r3, [pc, #68]	@ (8000500 <_sbrk+0x64>)
 80004ba:	4a12      	ldr	r2, [pc, #72]	@ (8000504 <_sbrk+0x68>)
 80004bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004be:	4b10      	ldr	r3, [pc, #64]	@ (8000500 <_sbrk+0x64>)
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4413      	add	r3, r2
 80004c6:	693a      	ldr	r2, [r7, #16]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d207      	bcs.n	80004dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004cc:	f000 fa8c 	bl	80009e8 <__errno>
 80004d0:	4603      	mov	r3, r0
 80004d2:	220c      	movs	r2, #12
 80004d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004d6:	f04f 33ff 	mov.w	r3, #4294967295
 80004da:	e009      	b.n	80004f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004dc:	4b08      	ldr	r3, [pc, #32]	@ (8000500 <_sbrk+0x64>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004e2:	4b07      	ldr	r3, [pc, #28]	@ (8000500 <_sbrk+0x64>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4413      	add	r3, r2
 80004ea:	4a05      	ldr	r2, [pc, #20]	@ (8000500 <_sbrk+0x64>)
 80004ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ee:	68fb      	ldr	r3, [r7, #12]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3718      	adds	r7, #24
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20020000 	.word	0x20020000
 80004fc:	00000400 	.word	0x00000400
 8000500:	20000098 	.word	0x20000098
 8000504:	200001e8 	.word	0x200001e8

08000508 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000508:	480d      	ldr	r0, [pc, #52]	@ (8000540 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800050a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800050c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000510:	480c      	ldr	r0, [pc, #48]	@ (8000544 <LoopForever+0x6>)
  ldr r1, =_edata
 8000512:	490d      	ldr	r1, [pc, #52]	@ (8000548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000514:	4a0d      	ldr	r2, [pc, #52]	@ (800054c <LoopForever+0xe>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000518:	e002      	b.n	8000520 <LoopCopyDataInit>

0800051a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800051c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051e:	3304      	adds	r3, #4

08000520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000524:	d3f9      	bcc.n	800051a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000526:	4a0a      	ldr	r2, [pc, #40]	@ (8000550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000528:	4c0a      	ldr	r4, [pc, #40]	@ (8000554 <LoopForever+0x16>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800052c:	e001      	b.n	8000532 <LoopFillZerobss>

0800052e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000530:	3204      	adds	r2, #4

08000532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000534:	d3fb      	bcc.n	800052e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000536:	f000 fa5d 	bl	80009f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800053a:	f7ff fe45 	bl	80001c8 <main>

0800053e <LoopForever>:

LoopForever:
  b LoopForever
 800053e:	e7fe      	b.n	800053e <LoopForever>
  ldr   r0, =_estack
 8000540:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000548:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800054c:	08000f14 	.word	0x08000f14
  ldr r2, =_sbss
 8000550:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000554:	200001e8 	.word	0x200001e8

08000558 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000558:	e7fe      	b.n	8000558 <ADC_IRQHandler>
	...

0800055c <std>:
 800055c:	2300      	movs	r3, #0
 800055e:	b510      	push	{r4, lr}
 8000560:	4604      	mov	r4, r0
 8000562:	e9c0 3300 	strd	r3, r3, [r0]
 8000566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800056a:	6083      	str	r3, [r0, #8]
 800056c:	8181      	strh	r1, [r0, #12]
 800056e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000570:	81c2      	strh	r2, [r0, #14]
 8000572:	6183      	str	r3, [r0, #24]
 8000574:	4619      	mov	r1, r3
 8000576:	2208      	movs	r2, #8
 8000578:	305c      	adds	r0, #92	@ 0x5c
 800057a:	f000 f9e7 	bl	800094c <memset>
 800057e:	4b0d      	ldr	r3, [pc, #52]	@ (80005b4 <std+0x58>)
 8000580:	6263      	str	r3, [r4, #36]	@ 0x24
 8000582:	4b0d      	ldr	r3, [pc, #52]	@ (80005b8 <std+0x5c>)
 8000584:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000586:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <std+0x60>)
 8000588:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800058a:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <std+0x64>)
 800058c:	6323      	str	r3, [r4, #48]	@ 0x30
 800058e:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <std+0x68>)
 8000590:	6224      	str	r4, [r4, #32]
 8000592:	429c      	cmp	r4, r3
 8000594:	d006      	beq.n	80005a4 <std+0x48>
 8000596:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800059a:	4294      	cmp	r4, r2
 800059c:	d002      	beq.n	80005a4 <std+0x48>
 800059e:	33d0      	adds	r3, #208	@ 0xd0
 80005a0:	429c      	cmp	r4, r3
 80005a2:	d105      	bne.n	80005b0 <std+0x54>
 80005a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80005a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005ac:	f000 ba46 	b.w	8000a3c <__retarget_lock_init_recursive>
 80005b0:	bd10      	pop	{r4, pc}
 80005b2:	bf00      	nop
 80005b4:	0800079d 	.word	0x0800079d
 80005b8:	080007bf 	.word	0x080007bf
 80005bc:	080007f7 	.word	0x080007f7
 80005c0:	0800081b 	.word	0x0800081b
 80005c4:	2000009c 	.word	0x2000009c

080005c8 <stdio_exit_handler>:
 80005c8:	4a02      	ldr	r2, [pc, #8]	@ (80005d4 <stdio_exit_handler+0xc>)
 80005ca:	4903      	ldr	r1, [pc, #12]	@ (80005d8 <stdio_exit_handler+0x10>)
 80005cc:	4803      	ldr	r0, [pc, #12]	@ (80005dc <stdio_exit_handler+0x14>)
 80005ce:	f000 b869 	b.w	80006a4 <_fwalk_sglue>
 80005d2:	bf00      	nop
 80005d4:	20000010 	.word	0x20000010
 80005d8:	08000d3d 	.word	0x08000d3d
 80005dc:	20000020 	.word	0x20000020

080005e0 <cleanup_stdio>:
 80005e0:	6841      	ldr	r1, [r0, #4]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <cleanup_stdio+0x34>)
 80005e4:	4299      	cmp	r1, r3
 80005e6:	b510      	push	{r4, lr}
 80005e8:	4604      	mov	r4, r0
 80005ea:	d001      	beq.n	80005f0 <cleanup_stdio+0x10>
 80005ec:	f000 fba6 	bl	8000d3c <_fflush_r>
 80005f0:	68a1      	ldr	r1, [r4, #8]
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <cleanup_stdio+0x38>)
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d002      	beq.n	80005fe <cleanup_stdio+0x1e>
 80005f8:	4620      	mov	r0, r4
 80005fa:	f000 fb9f 	bl	8000d3c <_fflush_r>
 80005fe:	68e1      	ldr	r1, [r4, #12]
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <cleanup_stdio+0x3c>)
 8000602:	4299      	cmp	r1, r3
 8000604:	d004      	beq.n	8000610 <cleanup_stdio+0x30>
 8000606:	4620      	mov	r0, r4
 8000608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800060c:	f000 bb96 	b.w	8000d3c <_fflush_r>
 8000610:	bd10      	pop	{r4, pc}
 8000612:	bf00      	nop
 8000614:	2000009c 	.word	0x2000009c
 8000618:	20000104 	.word	0x20000104
 800061c:	2000016c 	.word	0x2000016c

08000620 <global_stdio_init.part.0>:
 8000620:	b510      	push	{r4, lr}
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <global_stdio_init.part.0+0x30>)
 8000624:	4c0b      	ldr	r4, [pc, #44]	@ (8000654 <global_stdio_init.part.0+0x34>)
 8000626:	4a0c      	ldr	r2, [pc, #48]	@ (8000658 <global_stdio_init.part.0+0x38>)
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	4620      	mov	r0, r4
 800062c:	2200      	movs	r2, #0
 800062e:	2104      	movs	r1, #4
 8000630:	f7ff ff94 	bl	800055c <std>
 8000634:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000638:	2201      	movs	r2, #1
 800063a:	2109      	movs	r1, #9
 800063c:	f7ff ff8e 	bl	800055c <std>
 8000640:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000644:	2202      	movs	r2, #2
 8000646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800064a:	2112      	movs	r1, #18
 800064c:	f7ff bf86 	b.w	800055c <std>
 8000650:	200001d4 	.word	0x200001d4
 8000654:	2000009c 	.word	0x2000009c
 8000658:	080005c9 	.word	0x080005c9

0800065c <__sfp_lock_acquire>:
 800065c:	4801      	ldr	r0, [pc, #4]	@ (8000664 <__sfp_lock_acquire+0x8>)
 800065e:	f000 b9ee 	b.w	8000a3e <__retarget_lock_acquire_recursive>
 8000662:	bf00      	nop
 8000664:	200001dd 	.word	0x200001dd

08000668 <__sfp_lock_release>:
 8000668:	4801      	ldr	r0, [pc, #4]	@ (8000670 <__sfp_lock_release+0x8>)
 800066a:	f000 b9e9 	b.w	8000a40 <__retarget_lock_release_recursive>
 800066e:	bf00      	nop
 8000670:	200001dd 	.word	0x200001dd

08000674 <__sinit>:
 8000674:	b510      	push	{r4, lr}
 8000676:	4604      	mov	r4, r0
 8000678:	f7ff fff0 	bl	800065c <__sfp_lock_acquire>
 800067c:	6a23      	ldr	r3, [r4, #32]
 800067e:	b11b      	cbz	r3, 8000688 <__sinit+0x14>
 8000680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000684:	f7ff bff0 	b.w	8000668 <__sfp_lock_release>
 8000688:	4b04      	ldr	r3, [pc, #16]	@ (800069c <__sinit+0x28>)
 800068a:	6223      	str	r3, [r4, #32]
 800068c:	4b04      	ldr	r3, [pc, #16]	@ (80006a0 <__sinit+0x2c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d1f5      	bne.n	8000680 <__sinit+0xc>
 8000694:	f7ff ffc4 	bl	8000620 <global_stdio_init.part.0>
 8000698:	e7f2      	b.n	8000680 <__sinit+0xc>
 800069a:	bf00      	nop
 800069c:	080005e1 	.word	0x080005e1
 80006a0:	200001d4 	.word	0x200001d4

080006a4 <_fwalk_sglue>:
 80006a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006a8:	4607      	mov	r7, r0
 80006aa:	4688      	mov	r8, r1
 80006ac:	4614      	mov	r4, r2
 80006ae:	2600      	movs	r6, #0
 80006b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006b4:	f1b9 0901 	subs.w	r9, r9, #1
 80006b8:	d505      	bpl.n	80006c6 <_fwalk_sglue+0x22>
 80006ba:	6824      	ldr	r4, [r4, #0]
 80006bc:	2c00      	cmp	r4, #0
 80006be:	d1f7      	bne.n	80006b0 <_fwalk_sglue+0xc>
 80006c0:	4630      	mov	r0, r6
 80006c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006c6:	89ab      	ldrh	r3, [r5, #12]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d907      	bls.n	80006dc <_fwalk_sglue+0x38>
 80006cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006d0:	3301      	adds	r3, #1
 80006d2:	d003      	beq.n	80006dc <_fwalk_sglue+0x38>
 80006d4:	4629      	mov	r1, r5
 80006d6:	4638      	mov	r0, r7
 80006d8:	47c0      	blx	r8
 80006da:	4306      	orrs	r6, r0
 80006dc:	3568      	adds	r5, #104	@ 0x68
 80006de:	e7e9      	b.n	80006b4 <_fwalk_sglue+0x10>

080006e0 <_puts_r>:
 80006e0:	6a03      	ldr	r3, [r0, #32]
 80006e2:	b570      	push	{r4, r5, r6, lr}
 80006e4:	6884      	ldr	r4, [r0, #8]
 80006e6:	4605      	mov	r5, r0
 80006e8:	460e      	mov	r6, r1
 80006ea:	b90b      	cbnz	r3, 80006f0 <_puts_r+0x10>
 80006ec:	f7ff ffc2 	bl	8000674 <__sinit>
 80006f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80006f2:	07db      	lsls	r3, r3, #31
 80006f4:	d405      	bmi.n	8000702 <_puts_r+0x22>
 80006f6:	89a3      	ldrh	r3, [r4, #12]
 80006f8:	0598      	lsls	r0, r3, #22
 80006fa:	d402      	bmi.n	8000702 <_puts_r+0x22>
 80006fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80006fe:	f000 f99e 	bl	8000a3e <__retarget_lock_acquire_recursive>
 8000702:	89a3      	ldrh	r3, [r4, #12]
 8000704:	0719      	lsls	r1, r3, #28
 8000706:	d502      	bpl.n	800070e <_puts_r+0x2e>
 8000708:	6923      	ldr	r3, [r4, #16]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d135      	bne.n	800077a <_puts_r+0x9a>
 800070e:	4621      	mov	r1, r4
 8000710:	4628      	mov	r0, r5
 8000712:	f000 f8c5 	bl	80008a0 <__swsetup_r>
 8000716:	b380      	cbz	r0, 800077a <_puts_r+0x9a>
 8000718:	f04f 35ff 	mov.w	r5, #4294967295
 800071c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800071e:	07da      	lsls	r2, r3, #31
 8000720:	d405      	bmi.n	800072e <_puts_r+0x4e>
 8000722:	89a3      	ldrh	r3, [r4, #12]
 8000724:	059b      	lsls	r3, r3, #22
 8000726:	d402      	bmi.n	800072e <_puts_r+0x4e>
 8000728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800072a:	f000 f989 	bl	8000a40 <__retarget_lock_release_recursive>
 800072e:	4628      	mov	r0, r5
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	2b00      	cmp	r3, #0
 8000734:	da04      	bge.n	8000740 <_puts_r+0x60>
 8000736:	69a2      	ldr	r2, [r4, #24]
 8000738:	429a      	cmp	r2, r3
 800073a:	dc17      	bgt.n	800076c <_puts_r+0x8c>
 800073c:	290a      	cmp	r1, #10
 800073e:	d015      	beq.n	800076c <_puts_r+0x8c>
 8000740:	6823      	ldr	r3, [r4, #0]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	6022      	str	r2, [r4, #0]
 8000746:	7019      	strb	r1, [r3, #0]
 8000748:	68a3      	ldr	r3, [r4, #8]
 800074a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800074e:	3b01      	subs	r3, #1
 8000750:	60a3      	str	r3, [r4, #8]
 8000752:	2900      	cmp	r1, #0
 8000754:	d1ed      	bne.n	8000732 <_puts_r+0x52>
 8000756:	2b00      	cmp	r3, #0
 8000758:	da11      	bge.n	800077e <_puts_r+0x9e>
 800075a:	4622      	mov	r2, r4
 800075c:	210a      	movs	r1, #10
 800075e:	4628      	mov	r0, r5
 8000760:	f000 f85f 	bl	8000822 <__swbuf_r>
 8000764:	3001      	adds	r0, #1
 8000766:	d0d7      	beq.n	8000718 <_puts_r+0x38>
 8000768:	250a      	movs	r5, #10
 800076a:	e7d7      	b.n	800071c <_puts_r+0x3c>
 800076c:	4622      	mov	r2, r4
 800076e:	4628      	mov	r0, r5
 8000770:	f000 f857 	bl	8000822 <__swbuf_r>
 8000774:	3001      	adds	r0, #1
 8000776:	d1e7      	bne.n	8000748 <_puts_r+0x68>
 8000778:	e7ce      	b.n	8000718 <_puts_r+0x38>
 800077a:	3e01      	subs	r6, #1
 800077c:	e7e4      	b.n	8000748 <_puts_r+0x68>
 800077e:	6823      	ldr	r3, [r4, #0]
 8000780:	1c5a      	adds	r2, r3, #1
 8000782:	6022      	str	r2, [r4, #0]
 8000784:	220a      	movs	r2, #10
 8000786:	701a      	strb	r2, [r3, #0]
 8000788:	e7ee      	b.n	8000768 <_puts_r+0x88>
	...

0800078c <puts>:
 800078c:	4b02      	ldr	r3, [pc, #8]	@ (8000798 <puts+0xc>)
 800078e:	4601      	mov	r1, r0
 8000790:	6818      	ldr	r0, [r3, #0]
 8000792:	f7ff bfa5 	b.w	80006e0 <_puts_r>
 8000796:	bf00      	nop
 8000798:	2000001c 	.word	0x2000001c

0800079c <__sread>:
 800079c:	b510      	push	{r4, lr}
 800079e:	460c      	mov	r4, r1
 80007a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007a4:	f000 f8fc 	bl	80009a0 <_read_r>
 80007a8:	2800      	cmp	r0, #0
 80007aa:	bfab      	itete	ge
 80007ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80007ae:	89a3      	ldrhlt	r3, [r4, #12]
 80007b0:	181b      	addge	r3, r3, r0
 80007b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80007b6:	bfac      	ite	ge
 80007b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80007ba:	81a3      	strhlt	r3, [r4, #12]
 80007bc:	bd10      	pop	{r4, pc}

080007be <__swrite>:
 80007be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007c2:	461f      	mov	r7, r3
 80007c4:	898b      	ldrh	r3, [r1, #12]
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	4605      	mov	r5, r0
 80007ca:	460c      	mov	r4, r1
 80007cc:	4616      	mov	r6, r2
 80007ce:	d505      	bpl.n	80007dc <__swrite+0x1e>
 80007d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007d4:	2302      	movs	r3, #2
 80007d6:	2200      	movs	r2, #0
 80007d8:	f000 f8d0 	bl	800097c <_lseek_r>
 80007dc:	89a3      	ldrh	r3, [r4, #12]
 80007de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80007e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007e6:	81a3      	strh	r3, [r4, #12]
 80007e8:	4632      	mov	r2, r6
 80007ea:	463b      	mov	r3, r7
 80007ec:	4628      	mov	r0, r5
 80007ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80007f2:	f000 b8e7 	b.w	80009c4 <_write_r>

080007f6 <__sseek>:
 80007f6:	b510      	push	{r4, lr}
 80007f8:	460c      	mov	r4, r1
 80007fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007fe:	f000 f8bd 	bl	800097c <_lseek_r>
 8000802:	1c43      	adds	r3, r0, #1
 8000804:	89a3      	ldrh	r3, [r4, #12]
 8000806:	bf15      	itete	ne
 8000808:	6560      	strne	r0, [r4, #84]	@ 0x54
 800080a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800080e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000812:	81a3      	strheq	r3, [r4, #12]
 8000814:	bf18      	it	ne
 8000816:	81a3      	strhne	r3, [r4, #12]
 8000818:	bd10      	pop	{r4, pc}

0800081a <__sclose>:
 800081a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800081e:	f000 b89d 	b.w	800095c <_close_r>

08000822 <__swbuf_r>:
 8000822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000824:	460e      	mov	r6, r1
 8000826:	4614      	mov	r4, r2
 8000828:	4605      	mov	r5, r0
 800082a:	b118      	cbz	r0, 8000834 <__swbuf_r+0x12>
 800082c:	6a03      	ldr	r3, [r0, #32]
 800082e:	b90b      	cbnz	r3, 8000834 <__swbuf_r+0x12>
 8000830:	f7ff ff20 	bl	8000674 <__sinit>
 8000834:	69a3      	ldr	r3, [r4, #24]
 8000836:	60a3      	str	r3, [r4, #8]
 8000838:	89a3      	ldrh	r3, [r4, #12]
 800083a:	071a      	lsls	r2, r3, #28
 800083c:	d501      	bpl.n	8000842 <__swbuf_r+0x20>
 800083e:	6923      	ldr	r3, [r4, #16]
 8000840:	b943      	cbnz	r3, 8000854 <__swbuf_r+0x32>
 8000842:	4621      	mov	r1, r4
 8000844:	4628      	mov	r0, r5
 8000846:	f000 f82b 	bl	80008a0 <__swsetup_r>
 800084a:	b118      	cbz	r0, 8000854 <__swbuf_r+0x32>
 800084c:	f04f 37ff 	mov.w	r7, #4294967295
 8000850:	4638      	mov	r0, r7
 8000852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000854:	6823      	ldr	r3, [r4, #0]
 8000856:	6922      	ldr	r2, [r4, #16]
 8000858:	1a98      	subs	r0, r3, r2
 800085a:	6963      	ldr	r3, [r4, #20]
 800085c:	b2f6      	uxtb	r6, r6
 800085e:	4283      	cmp	r3, r0
 8000860:	4637      	mov	r7, r6
 8000862:	dc05      	bgt.n	8000870 <__swbuf_r+0x4e>
 8000864:	4621      	mov	r1, r4
 8000866:	4628      	mov	r0, r5
 8000868:	f000 fa68 	bl	8000d3c <_fflush_r>
 800086c:	2800      	cmp	r0, #0
 800086e:	d1ed      	bne.n	800084c <__swbuf_r+0x2a>
 8000870:	68a3      	ldr	r3, [r4, #8]
 8000872:	3b01      	subs	r3, #1
 8000874:	60a3      	str	r3, [r4, #8]
 8000876:	6823      	ldr	r3, [r4, #0]
 8000878:	1c5a      	adds	r2, r3, #1
 800087a:	6022      	str	r2, [r4, #0]
 800087c:	701e      	strb	r6, [r3, #0]
 800087e:	6962      	ldr	r2, [r4, #20]
 8000880:	1c43      	adds	r3, r0, #1
 8000882:	429a      	cmp	r2, r3
 8000884:	d004      	beq.n	8000890 <__swbuf_r+0x6e>
 8000886:	89a3      	ldrh	r3, [r4, #12]
 8000888:	07db      	lsls	r3, r3, #31
 800088a:	d5e1      	bpl.n	8000850 <__swbuf_r+0x2e>
 800088c:	2e0a      	cmp	r6, #10
 800088e:	d1df      	bne.n	8000850 <__swbuf_r+0x2e>
 8000890:	4621      	mov	r1, r4
 8000892:	4628      	mov	r0, r5
 8000894:	f000 fa52 	bl	8000d3c <_fflush_r>
 8000898:	2800      	cmp	r0, #0
 800089a:	d0d9      	beq.n	8000850 <__swbuf_r+0x2e>
 800089c:	e7d6      	b.n	800084c <__swbuf_r+0x2a>
	...

080008a0 <__swsetup_r>:
 80008a0:	b538      	push	{r3, r4, r5, lr}
 80008a2:	4b29      	ldr	r3, [pc, #164]	@ (8000948 <__swsetup_r+0xa8>)
 80008a4:	4605      	mov	r5, r0
 80008a6:	6818      	ldr	r0, [r3, #0]
 80008a8:	460c      	mov	r4, r1
 80008aa:	b118      	cbz	r0, 80008b4 <__swsetup_r+0x14>
 80008ac:	6a03      	ldr	r3, [r0, #32]
 80008ae:	b90b      	cbnz	r3, 80008b4 <__swsetup_r+0x14>
 80008b0:	f7ff fee0 	bl	8000674 <__sinit>
 80008b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008b8:	0719      	lsls	r1, r3, #28
 80008ba:	d422      	bmi.n	8000902 <__swsetup_r+0x62>
 80008bc:	06da      	lsls	r2, r3, #27
 80008be:	d407      	bmi.n	80008d0 <__swsetup_r+0x30>
 80008c0:	2209      	movs	r2, #9
 80008c2:	602a      	str	r2, [r5, #0]
 80008c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008c8:	81a3      	strh	r3, [r4, #12]
 80008ca:	f04f 30ff 	mov.w	r0, #4294967295
 80008ce:	e033      	b.n	8000938 <__swsetup_r+0x98>
 80008d0:	0758      	lsls	r0, r3, #29
 80008d2:	d512      	bpl.n	80008fa <__swsetup_r+0x5a>
 80008d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80008d6:	b141      	cbz	r1, 80008ea <__swsetup_r+0x4a>
 80008d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80008dc:	4299      	cmp	r1, r3
 80008de:	d002      	beq.n	80008e6 <__swsetup_r+0x46>
 80008e0:	4628      	mov	r0, r5
 80008e2:	f000 f8af 	bl	8000a44 <_free_r>
 80008e6:	2300      	movs	r3, #0
 80008e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80008ea:	89a3      	ldrh	r3, [r4, #12]
 80008ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80008f0:	81a3      	strh	r3, [r4, #12]
 80008f2:	2300      	movs	r3, #0
 80008f4:	6063      	str	r3, [r4, #4]
 80008f6:	6923      	ldr	r3, [r4, #16]
 80008f8:	6023      	str	r3, [r4, #0]
 80008fa:	89a3      	ldrh	r3, [r4, #12]
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	81a3      	strh	r3, [r4, #12]
 8000902:	6923      	ldr	r3, [r4, #16]
 8000904:	b94b      	cbnz	r3, 800091a <__swsetup_r+0x7a>
 8000906:	89a3      	ldrh	r3, [r4, #12]
 8000908:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800090c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000910:	d003      	beq.n	800091a <__swsetup_r+0x7a>
 8000912:	4621      	mov	r1, r4
 8000914:	4628      	mov	r0, r5
 8000916:	f000 fa5f 	bl	8000dd8 <__smakebuf_r>
 800091a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800091e:	f013 0201 	ands.w	r2, r3, #1
 8000922:	d00a      	beq.n	800093a <__swsetup_r+0x9a>
 8000924:	2200      	movs	r2, #0
 8000926:	60a2      	str	r2, [r4, #8]
 8000928:	6962      	ldr	r2, [r4, #20]
 800092a:	4252      	negs	r2, r2
 800092c:	61a2      	str	r2, [r4, #24]
 800092e:	6922      	ldr	r2, [r4, #16]
 8000930:	b942      	cbnz	r2, 8000944 <__swsetup_r+0xa4>
 8000932:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000936:	d1c5      	bne.n	80008c4 <__swsetup_r+0x24>
 8000938:	bd38      	pop	{r3, r4, r5, pc}
 800093a:	0799      	lsls	r1, r3, #30
 800093c:	bf58      	it	pl
 800093e:	6962      	ldrpl	r2, [r4, #20]
 8000940:	60a2      	str	r2, [r4, #8]
 8000942:	e7f4      	b.n	800092e <__swsetup_r+0x8e>
 8000944:	2000      	movs	r0, #0
 8000946:	e7f7      	b.n	8000938 <__swsetup_r+0x98>
 8000948:	2000001c 	.word	0x2000001c

0800094c <memset>:
 800094c:	4402      	add	r2, r0
 800094e:	4603      	mov	r3, r0
 8000950:	4293      	cmp	r3, r2
 8000952:	d100      	bne.n	8000956 <memset+0xa>
 8000954:	4770      	bx	lr
 8000956:	f803 1b01 	strb.w	r1, [r3], #1
 800095a:	e7f9      	b.n	8000950 <memset+0x4>

0800095c <_close_r>:
 800095c:	b538      	push	{r3, r4, r5, lr}
 800095e:	4d06      	ldr	r5, [pc, #24]	@ (8000978 <_close_r+0x1c>)
 8000960:	2300      	movs	r3, #0
 8000962:	4604      	mov	r4, r0
 8000964:	4608      	mov	r0, r1
 8000966:	602b      	str	r3, [r5, #0]
 8000968:	f7ff fd63 	bl	8000432 <_close>
 800096c:	1c43      	adds	r3, r0, #1
 800096e:	d102      	bne.n	8000976 <_close_r+0x1a>
 8000970:	682b      	ldr	r3, [r5, #0]
 8000972:	b103      	cbz	r3, 8000976 <_close_r+0x1a>
 8000974:	6023      	str	r3, [r4, #0]
 8000976:	bd38      	pop	{r3, r4, r5, pc}
 8000978:	200001d8 	.word	0x200001d8

0800097c <_lseek_r>:
 800097c:	b538      	push	{r3, r4, r5, lr}
 800097e:	4d07      	ldr	r5, [pc, #28]	@ (800099c <_lseek_r+0x20>)
 8000980:	4604      	mov	r4, r0
 8000982:	4608      	mov	r0, r1
 8000984:	4611      	mov	r1, r2
 8000986:	2200      	movs	r2, #0
 8000988:	602a      	str	r2, [r5, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	f7ff fd78 	bl	8000480 <_lseek>
 8000990:	1c43      	adds	r3, r0, #1
 8000992:	d102      	bne.n	800099a <_lseek_r+0x1e>
 8000994:	682b      	ldr	r3, [r5, #0]
 8000996:	b103      	cbz	r3, 800099a <_lseek_r+0x1e>
 8000998:	6023      	str	r3, [r4, #0]
 800099a:	bd38      	pop	{r3, r4, r5, pc}
 800099c:	200001d8 	.word	0x200001d8

080009a0 <_read_r>:
 80009a0:	b538      	push	{r3, r4, r5, lr}
 80009a2:	4d07      	ldr	r5, [pc, #28]	@ (80009c0 <_read_r+0x20>)
 80009a4:	4604      	mov	r4, r0
 80009a6:	4608      	mov	r0, r1
 80009a8:	4611      	mov	r1, r2
 80009aa:	2200      	movs	r2, #0
 80009ac:	602a      	str	r2, [r5, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	f7ff fd06 	bl	80003c0 <_read>
 80009b4:	1c43      	adds	r3, r0, #1
 80009b6:	d102      	bne.n	80009be <_read_r+0x1e>
 80009b8:	682b      	ldr	r3, [r5, #0]
 80009ba:	b103      	cbz	r3, 80009be <_read_r+0x1e>
 80009bc:	6023      	str	r3, [r4, #0]
 80009be:	bd38      	pop	{r3, r4, r5, pc}
 80009c0:	200001d8 	.word	0x200001d8

080009c4 <_write_r>:
 80009c4:	b538      	push	{r3, r4, r5, lr}
 80009c6:	4d07      	ldr	r5, [pc, #28]	@ (80009e4 <_write_r+0x20>)
 80009c8:	4604      	mov	r4, r0
 80009ca:	4608      	mov	r0, r1
 80009cc:	4611      	mov	r1, r2
 80009ce:	2200      	movs	r2, #0
 80009d0:	602a      	str	r2, [r5, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	f7ff fd11 	bl	80003fa <_write>
 80009d8:	1c43      	adds	r3, r0, #1
 80009da:	d102      	bne.n	80009e2 <_write_r+0x1e>
 80009dc:	682b      	ldr	r3, [r5, #0]
 80009de:	b103      	cbz	r3, 80009e2 <_write_r+0x1e>
 80009e0:	6023      	str	r3, [r4, #0]
 80009e2:	bd38      	pop	{r3, r4, r5, pc}
 80009e4:	200001d8 	.word	0x200001d8

080009e8 <__errno>:
 80009e8:	4b01      	ldr	r3, [pc, #4]	@ (80009f0 <__errno+0x8>)
 80009ea:	6818      	ldr	r0, [r3, #0]
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	2000001c 	.word	0x2000001c

080009f4 <__libc_init_array>:
 80009f4:	b570      	push	{r4, r5, r6, lr}
 80009f6:	4d0d      	ldr	r5, [pc, #52]	@ (8000a2c <__libc_init_array+0x38>)
 80009f8:	4c0d      	ldr	r4, [pc, #52]	@ (8000a30 <__libc_init_array+0x3c>)
 80009fa:	1b64      	subs	r4, r4, r5
 80009fc:	10a4      	asrs	r4, r4, #2
 80009fe:	2600      	movs	r6, #0
 8000a00:	42a6      	cmp	r6, r4
 8000a02:	d109      	bne.n	8000a18 <__libc_init_array+0x24>
 8000a04:	4d0b      	ldr	r5, [pc, #44]	@ (8000a34 <__libc_init_array+0x40>)
 8000a06:	4c0c      	ldr	r4, [pc, #48]	@ (8000a38 <__libc_init_array+0x44>)
 8000a08:	f000 fa54 	bl	8000eb4 <_init>
 8000a0c:	1b64      	subs	r4, r4, r5
 8000a0e:	10a4      	asrs	r4, r4, #2
 8000a10:	2600      	movs	r6, #0
 8000a12:	42a6      	cmp	r6, r4
 8000a14:	d105      	bne.n	8000a22 <__libc_init_array+0x2e>
 8000a16:	bd70      	pop	{r4, r5, r6, pc}
 8000a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a1c:	4798      	blx	r3
 8000a1e:	3601      	adds	r6, #1
 8000a20:	e7ee      	b.n	8000a00 <__libc_init_array+0xc>
 8000a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a26:	4798      	blx	r3
 8000a28:	3601      	adds	r6, #1
 8000a2a:	e7f2      	b.n	8000a12 <__libc_init_array+0x1e>
 8000a2c:	08000f0c 	.word	0x08000f0c
 8000a30:	08000f0c 	.word	0x08000f0c
 8000a34:	08000f0c 	.word	0x08000f0c
 8000a38:	08000f10 	.word	0x08000f10

08000a3c <__retarget_lock_init_recursive>:
 8000a3c:	4770      	bx	lr

08000a3e <__retarget_lock_acquire_recursive>:
 8000a3e:	4770      	bx	lr

08000a40 <__retarget_lock_release_recursive>:
 8000a40:	4770      	bx	lr
	...

08000a44 <_free_r>:
 8000a44:	b538      	push	{r3, r4, r5, lr}
 8000a46:	4605      	mov	r5, r0
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	d041      	beq.n	8000ad0 <_free_r+0x8c>
 8000a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a50:	1f0c      	subs	r4, r1, #4
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	bfb8      	it	lt
 8000a56:	18e4      	addlt	r4, r4, r3
 8000a58:	f000 f8e0 	bl	8000c1c <__malloc_lock>
 8000a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad4 <_free_r+0x90>)
 8000a5e:	6813      	ldr	r3, [r2, #0]
 8000a60:	b933      	cbnz	r3, 8000a70 <_free_r+0x2c>
 8000a62:	6063      	str	r3, [r4, #4]
 8000a64:	6014      	str	r4, [r2, #0]
 8000a66:	4628      	mov	r0, r5
 8000a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a6c:	f000 b8dc 	b.w	8000c28 <__malloc_unlock>
 8000a70:	42a3      	cmp	r3, r4
 8000a72:	d908      	bls.n	8000a86 <_free_r+0x42>
 8000a74:	6820      	ldr	r0, [r4, #0]
 8000a76:	1821      	adds	r1, r4, r0
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	bf01      	itttt	eq
 8000a7c:	6819      	ldreq	r1, [r3, #0]
 8000a7e:	685b      	ldreq	r3, [r3, #4]
 8000a80:	1809      	addeq	r1, r1, r0
 8000a82:	6021      	streq	r1, [r4, #0]
 8000a84:	e7ed      	b.n	8000a62 <_free_r+0x1e>
 8000a86:	461a      	mov	r2, r3
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	b10b      	cbz	r3, 8000a90 <_free_r+0x4c>
 8000a8c:	42a3      	cmp	r3, r4
 8000a8e:	d9fa      	bls.n	8000a86 <_free_r+0x42>
 8000a90:	6811      	ldr	r1, [r2, #0]
 8000a92:	1850      	adds	r0, r2, r1
 8000a94:	42a0      	cmp	r0, r4
 8000a96:	d10b      	bne.n	8000ab0 <_free_r+0x6c>
 8000a98:	6820      	ldr	r0, [r4, #0]
 8000a9a:	4401      	add	r1, r0
 8000a9c:	1850      	adds	r0, r2, r1
 8000a9e:	4283      	cmp	r3, r0
 8000aa0:	6011      	str	r1, [r2, #0]
 8000aa2:	d1e0      	bne.n	8000a66 <_free_r+0x22>
 8000aa4:	6818      	ldr	r0, [r3, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	6053      	str	r3, [r2, #4]
 8000aaa:	4408      	add	r0, r1
 8000aac:	6010      	str	r0, [r2, #0]
 8000aae:	e7da      	b.n	8000a66 <_free_r+0x22>
 8000ab0:	d902      	bls.n	8000ab8 <_free_r+0x74>
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	602b      	str	r3, [r5, #0]
 8000ab6:	e7d6      	b.n	8000a66 <_free_r+0x22>
 8000ab8:	6820      	ldr	r0, [r4, #0]
 8000aba:	1821      	adds	r1, r4, r0
 8000abc:	428b      	cmp	r3, r1
 8000abe:	bf04      	itt	eq
 8000ac0:	6819      	ldreq	r1, [r3, #0]
 8000ac2:	685b      	ldreq	r3, [r3, #4]
 8000ac4:	6063      	str	r3, [r4, #4]
 8000ac6:	bf04      	itt	eq
 8000ac8:	1809      	addeq	r1, r1, r0
 8000aca:	6021      	streq	r1, [r4, #0]
 8000acc:	6054      	str	r4, [r2, #4]
 8000ace:	e7ca      	b.n	8000a66 <_free_r+0x22>
 8000ad0:	bd38      	pop	{r3, r4, r5, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200001e4 	.word	0x200001e4

08000ad8 <sbrk_aligned>:
 8000ad8:	b570      	push	{r4, r5, r6, lr}
 8000ada:	4e0f      	ldr	r6, [pc, #60]	@ (8000b18 <sbrk_aligned+0x40>)
 8000adc:	460c      	mov	r4, r1
 8000ade:	6831      	ldr	r1, [r6, #0]
 8000ae0:	4605      	mov	r5, r0
 8000ae2:	b911      	cbnz	r1, 8000aea <sbrk_aligned+0x12>
 8000ae4:	f000 f9d6 	bl	8000e94 <_sbrk_r>
 8000ae8:	6030      	str	r0, [r6, #0]
 8000aea:	4621      	mov	r1, r4
 8000aec:	4628      	mov	r0, r5
 8000aee:	f000 f9d1 	bl	8000e94 <_sbrk_r>
 8000af2:	1c43      	adds	r3, r0, #1
 8000af4:	d103      	bne.n	8000afe <sbrk_aligned+0x26>
 8000af6:	f04f 34ff 	mov.w	r4, #4294967295
 8000afa:	4620      	mov	r0, r4
 8000afc:	bd70      	pop	{r4, r5, r6, pc}
 8000afe:	1cc4      	adds	r4, r0, #3
 8000b00:	f024 0403 	bic.w	r4, r4, #3
 8000b04:	42a0      	cmp	r0, r4
 8000b06:	d0f8      	beq.n	8000afa <sbrk_aligned+0x22>
 8000b08:	1a21      	subs	r1, r4, r0
 8000b0a:	4628      	mov	r0, r5
 8000b0c:	f000 f9c2 	bl	8000e94 <_sbrk_r>
 8000b10:	3001      	adds	r0, #1
 8000b12:	d1f2      	bne.n	8000afa <sbrk_aligned+0x22>
 8000b14:	e7ef      	b.n	8000af6 <sbrk_aligned+0x1e>
 8000b16:	bf00      	nop
 8000b18:	200001e0 	.word	0x200001e0

08000b1c <_malloc_r>:
 8000b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b20:	1ccd      	adds	r5, r1, #3
 8000b22:	f025 0503 	bic.w	r5, r5, #3
 8000b26:	3508      	adds	r5, #8
 8000b28:	2d0c      	cmp	r5, #12
 8000b2a:	bf38      	it	cc
 8000b2c:	250c      	movcc	r5, #12
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	4606      	mov	r6, r0
 8000b32:	db01      	blt.n	8000b38 <_malloc_r+0x1c>
 8000b34:	42a9      	cmp	r1, r5
 8000b36:	d904      	bls.n	8000b42 <_malloc_r+0x26>
 8000b38:	230c      	movs	r3, #12
 8000b3a:	6033      	str	r3, [r6, #0]
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c18 <_malloc_r+0xfc>
 8000b46:	f000 f869 	bl	8000c1c <__malloc_lock>
 8000b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b4e:	461c      	mov	r4, r3
 8000b50:	bb44      	cbnz	r4, 8000ba4 <_malloc_r+0x88>
 8000b52:	4629      	mov	r1, r5
 8000b54:	4630      	mov	r0, r6
 8000b56:	f7ff ffbf 	bl	8000ad8 <sbrk_aligned>
 8000b5a:	1c43      	adds	r3, r0, #1
 8000b5c:	4604      	mov	r4, r0
 8000b5e:	d158      	bne.n	8000c12 <_malloc_r+0xf6>
 8000b60:	f8d8 4000 	ldr.w	r4, [r8]
 8000b64:	4627      	mov	r7, r4
 8000b66:	2f00      	cmp	r7, #0
 8000b68:	d143      	bne.n	8000bf2 <_malloc_r+0xd6>
 8000b6a:	2c00      	cmp	r4, #0
 8000b6c:	d04b      	beq.n	8000c06 <_malloc_r+0xea>
 8000b6e:	6823      	ldr	r3, [r4, #0]
 8000b70:	4639      	mov	r1, r7
 8000b72:	4630      	mov	r0, r6
 8000b74:	eb04 0903 	add.w	r9, r4, r3
 8000b78:	f000 f98c 	bl	8000e94 <_sbrk_r>
 8000b7c:	4581      	cmp	r9, r0
 8000b7e:	d142      	bne.n	8000c06 <_malloc_r+0xea>
 8000b80:	6821      	ldr	r1, [r4, #0]
 8000b82:	1a6d      	subs	r5, r5, r1
 8000b84:	4629      	mov	r1, r5
 8000b86:	4630      	mov	r0, r6
 8000b88:	f7ff ffa6 	bl	8000ad8 <sbrk_aligned>
 8000b8c:	3001      	adds	r0, #1
 8000b8e:	d03a      	beq.n	8000c06 <_malloc_r+0xea>
 8000b90:	6823      	ldr	r3, [r4, #0]
 8000b92:	442b      	add	r3, r5
 8000b94:	6023      	str	r3, [r4, #0]
 8000b96:	f8d8 3000 	ldr.w	r3, [r8]
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	bb62      	cbnz	r2, 8000bf8 <_malloc_r+0xdc>
 8000b9e:	f8c8 7000 	str.w	r7, [r8]
 8000ba2:	e00f      	b.n	8000bc4 <_malloc_r+0xa8>
 8000ba4:	6822      	ldr	r2, [r4, #0]
 8000ba6:	1b52      	subs	r2, r2, r5
 8000ba8:	d420      	bmi.n	8000bec <_malloc_r+0xd0>
 8000baa:	2a0b      	cmp	r2, #11
 8000bac:	d917      	bls.n	8000bde <_malloc_r+0xc2>
 8000bae:	1961      	adds	r1, r4, r5
 8000bb0:	42a3      	cmp	r3, r4
 8000bb2:	6025      	str	r5, [r4, #0]
 8000bb4:	bf18      	it	ne
 8000bb6:	6059      	strne	r1, [r3, #4]
 8000bb8:	6863      	ldr	r3, [r4, #4]
 8000bba:	bf08      	it	eq
 8000bbc:	f8c8 1000 	streq.w	r1, [r8]
 8000bc0:	5162      	str	r2, [r4, r5]
 8000bc2:	604b      	str	r3, [r1, #4]
 8000bc4:	4630      	mov	r0, r6
 8000bc6:	f000 f82f 	bl	8000c28 <__malloc_unlock>
 8000bca:	f104 000b 	add.w	r0, r4, #11
 8000bce:	1d23      	adds	r3, r4, #4
 8000bd0:	f020 0007 	bic.w	r0, r0, #7
 8000bd4:	1ac2      	subs	r2, r0, r3
 8000bd6:	bf1c      	itt	ne
 8000bd8:	1a1b      	subne	r3, r3, r0
 8000bda:	50a3      	strne	r3, [r4, r2]
 8000bdc:	e7af      	b.n	8000b3e <_malloc_r+0x22>
 8000bde:	6862      	ldr	r2, [r4, #4]
 8000be0:	42a3      	cmp	r3, r4
 8000be2:	bf0c      	ite	eq
 8000be4:	f8c8 2000 	streq.w	r2, [r8]
 8000be8:	605a      	strne	r2, [r3, #4]
 8000bea:	e7eb      	b.n	8000bc4 <_malloc_r+0xa8>
 8000bec:	4623      	mov	r3, r4
 8000bee:	6864      	ldr	r4, [r4, #4]
 8000bf0:	e7ae      	b.n	8000b50 <_malloc_r+0x34>
 8000bf2:	463c      	mov	r4, r7
 8000bf4:	687f      	ldr	r7, [r7, #4]
 8000bf6:	e7b6      	b.n	8000b66 <_malloc_r+0x4a>
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	42a3      	cmp	r3, r4
 8000bfe:	d1fb      	bne.n	8000bf8 <_malloc_r+0xdc>
 8000c00:	2300      	movs	r3, #0
 8000c02:	6053      	str	r3, [r2, #4]
 8000c04:	e7de      	b.n	8000bc4 <_malloc_r+0xa8>
 8000c06:	230c      	movs	r3, #12
 8000c08:	6033      	str	r3, [r6, #0]
 8000c0a:	4630      	mov	r0, r6
 8000c0c:	f000 f80c 	bl	8000c28 <__malloc_unlock>
 8000c10:	e794      	b.n	8000b3c <_malloc_r+0x20>
 8000c12:	6005      	str	r5, [r0, #0]
 8000c14:	e7d6      	b.n	8000bc4 <_malloc_r+0xa8>
 8000c16:	bf00      	nop
 8000c18:	200001e4 	.word	0x200001e4

08000c1c <__malloc_lock>:
 8000c1c:	4801      	ldr	r0, [pc, #4]	@ (8000c24 <__malloc_lock+0x8>)
 8000c1e:	f7ff bf0e 	b.w	8000a3e <__retarget_lock_acquire_recursive>
 8000c22:	bf00      	nop
 8000c24:	200001dc 	.word	0x200001dc

08000c28 <__malloc_unlock>:
 8000c28:	4801      	ldr	r0, [pc, #4]	@ (8000c30 <__malloc_unlock+0x8>)
 8000c2a:	f7ff bf09 	b.w	8000a40 <__retarget_lock_release_recursive>
 8000c2e:	bf00      	nop
 8000c30:	200001dc 	.word	0x200001dc

08000c34 <__sflush_r>:
 8000c34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c3c:	0716      	lsls	r6, r2, #28
 8000c3e:	4605      	mov	r5, r0
 8000c40:	460c      	mov	r4, r1
 8000c42:	d454      	bmi.n	8000cee <__sflush_r+0xba>
 8000c44:	684b      	ldr	r3, [r1, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	dc02      	bgt.n	8000c50 <__sflush_r+0x1c>
 8000c4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	dd48      	ble.n	8000ce2 <__sflush_r+0xae>
 8000c50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	d045      	beq.n	8000ce2 <__sflush_r+0xae>
 8000c56:	2300      	movs	r3, #0
 8000c58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000c5c:	682f      	ldr	r7, [r5, #0]
 8000c5e:	6a21      	ldr	r1, [r4, #32]
 8000c60:	602b      	str	r3, [r5, #0]
 8000c62:	d030      	beq.n	8000cc6 <__sflush_r+0x92>
 8000c64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000c66:	89a3      	ldrh	r3, [r4, #12]
 8000c68:	0759      	lsls	r1, r3, #29
 8000c6a:	d505      	bpl.n	8000c78 <__sflush_r+0x44>
 8000c6c:	6863      	ldr	r3, [r4, #4]
 8000c6e:	1ad2      	subs	r2, r2, r3
 8000c70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000c72:	b10b      	cbz	r3, 8000c78 <__sflush_r+0x44>
 8000c74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000c76:	1ad2      	subs	r2, r2, r3
 8000c78:	2300      	movs	r3, #0
 8000c7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000c7c:	6a21      	ldr	r1, [r4, #32]
 8000c7e:	4628      	mov	r0, r5
 8000c80:	47b0      	blx	r6
 8000c82:	1c43      	adds	r3, r0, #1
 8000c84:	89a3      	ldrh	r3, [r4, #12]
 8000c86:	d106      	bne.n	8000c96 <__sflush_r+0x62>
 8000c88:	6829      	ldr	r1, [r5, #0]
 8000c8a:	291d      	cmp	r1, #29
 8000c8c:	d82b      	bhi.n	8000ce6 <__sflush_r+0xb2>
 8000c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8000d38 <__sflush_r+0x104>)
 8000c90:	410a      	asrs	r2, r1
 8000c92:	07d6      	lsls	r6, r2, #31
 8000c94:	d427      	bmi.n	8000ce6 <__sflush_r+0xb2>
 8000c96:	2200      	movs	r2, #0
 8000c98:	6062      	str	r2, [r4, #4]
 8000c9a:	04d9      	lsls	r1, r3, #19
 8000c9c:	6922      	ldr	r2, [r4, #16]
 8000c9e:	6022      	str	r2, [r4, #0]
 8000ca0:	d504      	bpl.n	8000cac <__sflush_r+0x78>
 8000ca2:	1c42      	adds	r2, r0, #1
 8000ca4:	d101      	bne.n	8000caa <__sflush_r+0x76>
 8000ca6:	682b      	ldr	r3, [r5, #0]
 8000ca8:	b903      	cbnz	r3, 8000cac <__sflush_r+0x78>
 8000caa:	6560      	str	r0, [r4, #84]	@ 0x54
 8000cac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000cae:	602f      	str	r7, [r5, #0]
 8000cb0:	b1b9      	cbz	r1, 8000ce2 <__sflush_r+0xae>
 8000cb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000cb6:	4299      	cmp	r1, r3
 8000cb8:	d002      	beq.n	8000cc0 <__sflush_r+0x8c>
 8000cba:	4628      	mov	r0, r5
 8000cbc:	f7ff fec2 	bl	8000a44 <_free_r>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8000cc4:	e00d      	b.n	8000ce2 <__sflush_r+0xae>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	4628      	mov	r0, r5
 8000cca:	47b0      	blx	r6
 8000ccc:	4602      	mov	r2, r0
 8000cce:	1c50      	adds	r0, r2, #1
 8000cd0:	d1c9      	bne.n	8000c66 <__sflush_r+0x32>
 8000cd2:	682b      	ldr	r3, [r5, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d0c6      	beq.n	8000c66 <__sflush_r+0x32>
 8000cd8:	2b1d      	cmp	r3, #29
 8000cda:	d001      	beq.n	8000ce0 <__sflush_r+0xac>
 8000cdc:	2b16      	cmp	r3, #22
 8000cde:	d11e      	bne.n	8000d1e <__sflush_r+0xea>
 8000ce0:	602f      	str	r7, [r5, #0]
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	e022      	b.n	8000d2c <__sflush_r+0xf8>
 8000ce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	e01b      	b.n	8000d26 <__sflush_r+0xf2>
 8000cee:	690f      	ldr	r7, [r1, #16]
 8000cf0:	2f00      	cmp	r7, #0
 8000cf2:	d0f6      	beq.n	8000ce2 <__sflush_r+0xae>
 8000cf4:	0793      	lsls	r3, r2, #30
 8000cf6:	680e      	ldr	r6, [r1, #0]
 8000cf8:	bf08      	it	eq
 8000cfa:	694b      	ldreq	r3, [r1, #20]
 8000cfc:	600f      	str	r7, [r1, #0]
 8000cfe:	bf18      	it	ne
 8000d00:	2300      	movne	r3, #0
 8000d02:	eba6 0807 	sub.w	r8, r6, r7
 8000d06:	608b      	str	r3, [r1, #8]
 8000d08:	f1b8 0f00 	cmp.w	r8, #0
 8000d0c:	dde9      	ble.n	8000ce2 <__sflush_r+0xae>
 8000d0e:	6a21      	ldr	r1, [r4, #32]
 8000d10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000d12:	4643      	mov	r3, r8
 8000d14:	463a      	mov	r2, r7
 8000d16:	4628      	mov	r0, r5
 8000d18:	47b0      	blx	r6
 8000d1a:	2800      	cmp	r0, #0
 8000d1c:	dc08      	bgt.n	8000d30 <__sflush_r+0xfc>
 8000d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d26:	81a3      	strh	r3, [r4, #12]
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d30:	4407      	add	r7, r0
 8000d32:	eba8 0800 	sub.w	r8, r8, r0
 8000d36:	e7e7      	b.n	8000d08 <__sflush_r+0xd4>
 8000d38:	dfbffffe 	.word	0xdfbffffe

08000d3c <_fflush_r>:
 8000d3c:	b538      	push	{r3, r4, r5, lr}
 8000d3e:	690b      	ldr	r3, [r1, #16]
 8000d40:	4605      	mov	r5, r0
 8000d42:	460c      	mov	r4, r1
 8000d44:	b913      	cbnz	r3, 8000d4c <_fflush_r+0x10>
 8000d46:	2500      	movs	r5, #0
 8000d48:	4628      	mov	r0, r5
 8000d4a:	bd38      	pop	{r3, r4, r5, pc}
 8000d4c:	b118      	cbz	r0, 8000d56 <_fflush_r+0x1a>
 8000d4e:	6a03      	ldr	r3, [r0, #32]
 8000d50:	b90b      	cbnz	r3, 8000d56 <_fflush_r+0x1a>
 8000d52:	f7ff fc8f 	bl	8000674 <__sinit>
 8000d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0f3      	beq.n	8000d46 <_fflush_r+0xa>
 8000d5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000d60:	07d0      	lsls	r0, r2, #31
 8000d62:	d404      	bmi.n	8000d6e <_fflush_r+0x32>
 8000d64:	0599      	lsls	r1, r3, #22
 8000d66:	d402      	bmi.n	8000d6e <_fflush_r+0x32>
 8000d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d6a:	f7ff fe68 	bl	8000a3e <__retarget_lock_acquire_recursive>
 8000d6e:	4628      	mov	r0, r5
 8000d70:	4621      	mov	r1, r4
 8000d72:	f7ff ff5f 	bl	8000c34 <__sflush_r>
 8000d76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d78:	07da      	lsls	r2, r3, #31
 8000d7a:	4605      	mov	r5, r0
 8000d7c:	d4e4      	bmi.n	8000d48 <_fflush_r+0xc>
 8000d7e:	89a3      	ldrh	r3, [r4, #12]
 8000d80:	059b      	lsls	r3, r3, #22
 8000d82:	d4e1      	bmi.n	8000d48 <_fflush_r+0xc>
 8000d84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d86:	f7ff fe5b 	bl	8000a40 <__retarget_lock_release_recursive>
 8000d8a:	e7dd      	b.n	8000d48 <_fflush_r+0xc>

08000d8c <__swhatbuf_r>:
 8000d8c:	b570      	push	{r4, r5, r6, lr}
 8000d8e:	460c      	mov	r4, r1
 8000d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d94:	2900      	cmp	r1, #0
 8000d96:	b096      	sub	sp, #88	@ 0x58
 8000d98:	4615      	mov	r5, r2
 8000d9a:	461e      	mov	r6, r3
 8000d9c:	da0d      	bge.n	8000dba <__swhatbuf_r+0x2e>
 8000d9e:	89a3      	ldrh	r3, [r4, #12]
 8000da0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000da4:	f04f 0100 	mov.w	r1, #0
 8000da8:	bf14      	ite	ne
 8000daa:	2340      	movne	r3, #64	@ 0x40
 8000dac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000db0:	2000      	movs	r0, #0
 8000db2:	6031      	str	r1, [r6, #0]
 8000db4:	602b      	str	r3, [r5, #0]
 8000db6:	b016      	add	sp, #88	@ 0x58
 8000db8:	bd70      	pop	{r4, r5, r6, pc}
 8000dba:	466a      	mov	r2, sp
 8000dbc:	f000 f848 	bl	8000e50 <_fstat_r>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	dbec      	blt.n	8000d9e <__swhatbuf_r+0x12>
 8000dc4:	9901      	ldr	r1, [sp, #4]
 8000dc6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000dca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000dce:	4259      	negs	r1, r3
 8000dd0:	4159      	adcs	r1, r3
 8000dd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dd6:	e7eb      	b.n	8000db0 <__swhatbuf_r+0x24>

08000dd8 <__smakebuf_r>:
 8000dd8:	898b      	ldrh	r3, [r1, #12]
 8000dda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ddc:	079d      	lsls	r5, r3, #30
 8000dde:	4606      	mov	r6, r0
 8000de0:	460c      	mov	r4, r1
 8000de2:	d507      	bpl.n	8000df4 <__smakebuf_r+0x1c>
 8000de4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000de8:	6023      	str	r3, [r4, #0]
 8000dea:	6123      	str	r3, [r4, #16]
 8000dec:	2301      	movs	r3, #1
 8000dee:	6163      	str	r3, [r4, #20]
 8000df0:	b003      	add	sp, #12
 8000df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df4:	ab01      	add	r3, sp, #4
 8000df6:	466a      	mov	r2, sp
 8000df8:	f7ff ffc8 	bl	8000d8c <__swhatbuf_r>
 8000dfc:	9f00      	ldr	r7, [sp, #0]
 8000dfe:	4605      	mov	r5, r0
 8000e00:	4639      	mov	r1, r7
 8000e02:	4630      	mov	r0, r6
 8000e04:	f7ff fe8a 	bl	8000b1c <_malloc_r>
 8000e08:	b948      	cbnz	r0, 8000e1e <__smakebuf_r+0x46>
 8000e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e0e:	059a      	lsls	r2, r3, #22
 8000e10:	d4ee      	bmi.n	8000df0 <__smakebuf_r+0x18>
 8000e12:	f023 0303 	bic.w	r3, r3, #3
 8000e16:	f043 0302 	orr.w	r3, r3, #2
 8000e1a:	81a3      	strh	r3, [r4, #12]
 8000e1c:	e7e2      	b.n	8000de4 <__smakebuf_r+0xc>
 8000e1e:	89a3      	ldrh	r3, [r4, #12]
 8000e20:	6020      	str	r0, [r4, #0]
 8000e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e26:	81a3      	strh	r3, [r4, #12]
 8000e28:	9b01      	ldr	r3, [sp, #4]
 8000e2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000e2e:	b15b      	cbz	r3, 8000e48 <__smakebuf_r+0x70>
 8000e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e34:	4630      	mov	r0, r6
 8000e36:	f000 f81d 	bl	8000e74 <_isatty_r>
 8000e3a:	b128      	cbz	r0, 8000e48 <__smakebuf_r+0x70>
 8000e3c:	89a3      	ldrh	r3, [r4, #12]
 8000e3e:	f023 0303 	bic.w	r3, r3, #3
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	81a3      	strh	r3, [r4, #12]
 8000e48:	89a3      	ldrh	r3, [r4, #12]
 8000e4a:	431d      	orrs	r5, r3
 8000e4c:	81a5      	strh	r5, [r4, #12]
 8000e4e:	e7cf      	b.n	8000df0 <__smakebuf_r+0x18>

08000e50 <_fstat_r>:
 8000e50:	b538      	push	{r3, r4, r5, lr}
 8000e52:	4d07      	ldr	r5, [pc, #28]	@ (8000e70 <_fstat_r+0x20>)
 8000e54:	2300      	movs	r3, #0
 8000e56:	4604      	mov	r4, r0
 8000e58:	4608      	mov	r0, r1
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	602b      	str	r3, [r5, #0]
 8000e5e:	f7ff faf4 	bl	800044a <_fstat>
 8000e62:	1c43      	adds	r3, r0, #1
 8000e64:	d102      	bne.n	8000e6c <_fstat_r+0x1c>
 8000e66:	682b      	ldr	r3, [r5, #0]
 8000e68:	b103      	cbz	r3, 8000e6c <_fstat_r+0x1c>
 8000e6a:	6023      	str	r3, [r4, #0]
 8000e6c:	bd38      	pop	{r3, r4, r5, pc}
 8000e6e:	bf00      	nop
 8000e70:	200001d8 	.word	0x200001d8

08000e74 <_isatty_r>:
 8000e74:	b538      	push	{r3, r4, r5, lr}
 8000e76:	4d06      	ldr	r5, [pc, #24]	@ (8000e90 <_isatty_r+0x1c>)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	602b      	str	r3, [r5, #0]
 8000e80:	f7ff faf3 	bl	800046a <_isatty>
 8000e84:	1c43      	adds	r3, r0, #1
 8000e86:	d102      	bne.n	8000e8e <_isatty_r+0x1a>
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	b103      	cbz	r3, 8000e8e <_isatty_r+0x1a>
 8000e8c:	6023      	str	r3, [r4, #0]
 8000e8e:	bd38      	pop	{r3, r4, r5, pc}
 8000e90:	200001d8 	.word	0x200001d8

08000e94 <_sbrk_r>:
 8000e94:	b538      	push	{r3, r4, r5, lr}
 8000e96:	4d06      	ldr	r5, [pc, #24]	@ (8000eb0 <_sbrk_r+0x1c>)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	602b      	str	r3, [r5, #0]
 8000ea0:	f7ff fafc 	bl	800049c <_sbrk>
 8000ea4:	1c43      	adds	r3, r0, #1
 8000ea6:	d102      	bne.n	8000eae <_sbrk_r+0x1a>
 8000ea8:	682b      	ldr	r3, [r5, #0]
 8000eaa:	b103      	cbz	r3, 8000eae <_sbrk_r+0x1a>
 8000eac:	6023      	str	r3, [r4, #0]
 8000eae:	bd38      	pop	{r3, r4, r5, pc}
 8000eb0:	200001d8 	.word	0x200001d8

08000eb4 <_init>:
 8000eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb6:	bf00      	nop
 8000eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eba:	bc08      	pop	{r3}
 8000ebc:	469e      	mov	lr, r3
 8000ebe:	4770      	bx	lr

08000ec0 <_fini>:
 8000ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec2:	bf00      	nop
 8000ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ec6:	bc08      	pop	{r3}
 8000ec8:	469e      	mov	lr, r3
 8000eca:	4770      	bx	lr
