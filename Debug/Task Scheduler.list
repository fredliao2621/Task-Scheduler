
Task Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e78  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08001000  08001000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001088  08001088  0000306c  2**0
                  CONTENTS
  4 .ARM          00000000  08001088  08001088  0000306c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001088  08001088  0000306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001088  08001088  00002088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800108c  0800108c  0000208c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08001090  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000306c  2**0
                  CONTENTS
 10 .bss          00000180  2000006c  2000006c  0000306c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ec  200001ec  0000306c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b39  00000000  00000000  0000309c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003c1  00000000  00000000  00003bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  00003f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000011f  00000000  00000000  00004130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d3d  00000000  00000000  0000424f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000016b5  00000000  00000000  00006f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009afc  00000000  00000000  00008641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001213d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ba4  00000000  00000000  00012180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  00012d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000fe8 	.word	0x08000fe8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	08000fe8 	.word	0x08000fe8

080001c8 <main>:
uint32_t psp_of_tasks[MAX_TASKS] = {T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START};
uint32_t task_handlers[MAX_TASKS];
uint8_t current_task = 0; //task1 is running

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	enable_processor_faults(); //我們要處理stack memory，可能會不小心使用非法指令等等，enable來追蹤這些fault
 80001cc:	f000 f8ce 	bl	800036c <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START); //初始化MSP
 80001d0:	480d      	ldr	r0, [pc, #52]	@ (8000208 <main+0x40>)
 80001d2:	f000 f87d 	bl	80002d0 <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler; //不同task handler的位址
 80001d6:	4a0d      	ldr	r2, [pc, #52]	@ (800020c <main+0x44>)
 80001d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000210 <main+0x48>)
 80001da:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 80001dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000214 <main+0x4c>)
 80001de:	4b0c      	ldr	r3, [pc, #48]	@ (8000210 <main+0x48>)
 80001e0:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 80001e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000218 <main+0x50>)
 80001e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000210 <main+0x48>)
 80001e6:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 80001e8:	4a0c      	ldr	r2, [pc, #48]	@ (800021c <main+0x54>)
 80001ea:	4b09      	ldr	r3, [pc, #36]	@ (8000210 <main+0x48>)
 80001ec:	60da      	str	r2, [r3, #12]

	init_tasks_stack();
 80001ee:	f000 f875 	bl	80002dc <init_tasks_stack>

	init_systick_timer(TICK_HZ);
 80001f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001f6:	f000 f833 	bl	8000260 <init_systick_timer>

	switch_sp_to_psp(); //前面是使用MSP，接下來要使用PSP
 80001fa:	f000 f915 	bl	8000428 <switch_sp_to_psp>

	task1_handler();
 80001fe:	f000 f80f 	bl	8000220 <task1_handler>
    /* Loop forever */
	for(;;);
 8000202:	bf00      	nop
 8000204:	e7fd      	b.n	8000202 <main+0x3a>
 8000206:	bf00      	nop
 8000208:	2001f000 	.word	0x2001f000
 800020c:	08000221 	.word	0x08000221
 8000210:	20000088 	.word	0x20000088
 8000214:	08000231 	.word	0x08000231
 8000218:	08000241 	.word	0x08000241
 800021c:	08000251 	.word	0x08000251

08000220 <task1_handler>:
}

void task1_handler(void){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task1\n");
 8000224:	4801      	ldr	r0, [pc, #4]	@ (800022c <task1_handler+0xc>)
 8000226:	f000 fb4b 	bl	80008c0 <puts>
 800022a:	e7fb      	b.n	8000224 <task1_handler+0x4>
 800022c:	08001000 	.word	0x08001000

08000230 <task2_handler>:
	}
}

void task2_handler(void){
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task2\n");
 8000234:	4801      	ldr	r0, [pc, #4]	@ (800023c <task2_handler+0xc>)
 8000236:	f000 fb43 	bl	80008c0 <puts>
 800023a:	e7fb      	b.n	8000234 <task2_handler+0x4>
 800023c:	08001010 	.word	0x08001010

08000240 <task3_handler>:
	}
}

void task3_handler(void){
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task3\n");
 8000244:	4801      	ldr	r0, [pc, #4]	@ (800024c <task3_handler+0xc>)
 8000246:	f000 fb3b 	bl	80008c0 <puts>
 800024a:	e7fb      	b.n	8000244 <task3_handler+0x4>
 800024c:	08001020 	.word	0x08001020

08000250 <task4_handler>:
	}
}

void task4_handler(void){
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task4\n");
 8000254:	4801      	ldr	r0, [pc, #4]	@ (800025c <task4_handler+0xc>)
 8000256:	f000 fb33 	bl	80008c0 <puts>
 800025a:	e7fb      	b.n	8000254 <task4_handler+0x4>
 800025c:	08001030 	.word	0x08001030

08000260 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz){
 8000260:	b480      	push	{r7}
 8000262:	b087      	sub	sp, #28
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000268:	4b16      	ldr	r3, [pc, #88]	@ (80002c4 <init_systick_timer+0x64>)
 800026a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 800026c:	4b16      	ldr	r3, [pc, #88]	@ (80002c8 <init_systick_timer+0x68>)
 800026e:	613b      	str	r3, [r7, #16]
	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;
 8000270:	4a16      	ldr	r2, [pc, #88]	@ (80002cc <init_systick_timer+0x6c>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	fbb2 f3f3 	udiv	r3, r2, r3
 8000278:	3b01      	subs	r3, #1
 800027a:	60fb      	str	r3, [r7, #12]

	//Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFF);
 800027c:	697b      	ldr	r3, [r7, #20]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	601a      	str	r2, [r3, #0]

	//Load the value of SVR
	*pSRVR |= count_value;
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	431a      	orrs	r2, r3
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	601a      	str	r2, [r3, #0]

	//Do some setting
	*pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 8000294:	693b      	ldr	r3, [r7, #16]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f043 0202 	orr.w	r2, r3, #2
 800029c:	693b      	ldr	r3, [r7, #16]
 800029e:	601a      	str	r2, [r3, #0]
	*pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80002a0:	693b      	ldr	r3, [r7, #16]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f043 0204 	orr.w	r2, r3, #4
 80002a8:	693b      	ldr	r3, [r7, #16]
 80002aa:	601a      	str	r2, [r3, #0]

	//Enable the systick
	*pSCSR |= ( 1 << 0); //enables the counter
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	f043 0201 	orr.w	r2, r3, #1
 80002b4:	693b      	ldr	r3, [r7, #16]
 80002b6:	601a      	str	r2, [r3, #0]
}
 80002b8:	bf00      	nop
 80002ba:	371c      	adds	r7, #28
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr
 80002c4:	e000e014 	.word	0xe000e014
 80002c8:	e000e010 	.word	0xe000e010
 80002cc:	00f42400 	.word	0x00f42400

080002d0 <init_scheduler_stack>:

//更改MSP的值，MSP是special reg，所以要用inline assembly，所以function要做成naked function
__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_stack){
 80002d0:	4603      	mov	r3, r0
	asm volatile("MSR MSP,%0"::"r"(sched_top_stack):);
 80002d2:	f383 8808 	msr	MSP, r3
	//volatile("MSR MSP,R0");
	asm volatile("BX LR");
 80002d6:	4770      	bx	lr
	//BX(Branch Indirect)把LR的值複製到PC
}
 80002d8:	bf00      	nop
	...

080002dc <init_tasks_stack>:

void init_tasks_stack(void){
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
	uint32_t *pPSP;

	for(int i = 0; i < MAX_TASKS; i++){
 80002e2:	2300      	movs	r3, #0
 80002e4:	60bb      	str	r3, [r7, #8]
 80002e6:	e032      	b.n	800034e <init_tasks_stack+0x72>
		pPSP = (uint32_t*)psp_of_tasks[i];
 80002e8:	4a1e      	ldr	r2, [pc, #120]	@ (8000364 <init_tasks_stack+0x88>)
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f0:	60fb      	str	r3, [r7, #12]

		pPSP--;
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	3b04      	subs	r3, #4
 80002f6:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //0X01000000
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80002fe:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	3b04      	subs	r3, #4
 8000304:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 8000306:	4a18      	ldr	r2, [pc, #96]	@ (8000368 <init_tasks_stack+0x8c>)
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	3b04      	subs	r3, #4
 8000316:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f06f 0202 	mvn.w	r2, #2
 800031e:	601a      	str	r2, [r3, #0]

		for(int j = 0 ; j < 13 ; j++) //把剩下的R0~R12存0
 8000320:	2300      	movs	r3, #0
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	e008      	b.n	8000338 <init_tasks_stack+0x5c>
		{
			pPSP--;
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	3b04      	subs	r3, #4
 800032a:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < 13 ; j++) //把剩下的R0~R12存0
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	3301      	adds	r3, #1
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2b0c      	cmp	r3, #12
 800033c:	ddf3      	ble.n	8000326 <init_tasks_stack+0x4a>
		}
		psp_of_tasks[i] = (uint32_t)pPSP;
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	4908      	ldr	r1, [pc, #32]	@ (8000364 <init_tasks_stack+0x88>)
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < MAX_TASKS; i++){
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	3301      	adds	r3, #1
 800034c:	60bb      	str	r3, [r7, #8]
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	2b03      	cmp	r3, #3
 8000352:	ddc9      	ble.n	80002e8 <init_tasks_stack+0xc>
	}
}
 8000354:	bf00      	nop
 8000356:	bf00      	nop
 8000358:	3714      	adds	r7, #20
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	20000000 	.word	0x20000000
 8000368:	20000088 	.word	0x20000088

0800036c <enable_processor_faults>:

void enable_processor_faults(void){
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000372:	4b0d      	ldr	r3, [pc, #52]	@ (80003a8 <enable_processor_faults+0x3c>)
 8000374:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16); //mem manage
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17); //bus fault
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18); //usage fault
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	601a      	str	r2, [r3, #0]
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	e000ed24 	.word	0xe000ed24

080003ac <get_psp_value>:


uint32_t get_psp_value(void){
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 80003b0:	4b05      	ldr	r3, [pc, #20]	@ (80003c8 <get_psp_value+0x1c>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	461a      	mov	r2, r3
 80003b6:	4b05      	ldr	r3, [pc, #20]	@ (80003cc <get_psp_value+0x20>)
 80003b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80003bc:	4618      	mov	r0, r3
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	20000098 	.word	0x20000098
 80003cc:	20000000 	.word	0x20000000

080003d0 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value){
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task] = current_psp_value;
 80003d8:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <save_psp_value+0x24>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	4619      	mov	r1, r3
 80003de:	4a06      	ldr	r2, [pc, #24]	@ (80003f8 <save_psp_value+0x28>)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	20000098 	.word	0x20000098
 80003f8:	20000000 	.word	0x20000000

080003fc <update_next_task>:

void update_next_task(void){
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
	current_task++;
 8000400:	4b08      	ldr	r3, [pc, #32]	@ (8000424 <update_next_task+0x28>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	3301      	adds	r3, #1
 8000406:	b2da      	uxtb	r2, r3
 8000408:	4b06      	ldr	r3, [pc, #24]	@ (8000424 <update_next_task+0x28>)
 800040a:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS;
 800040c:	4b05      	ldr	r3, [pc, #20]	@ (8000424 <update_next_task+0x28>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	f003 0303 	and.w	r3, r3, #3
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b03      	ldr	r3, [pc, #12]	@ (8000424 <update_next_task+0x28>)
 8000418:	701a      	strb	r2, [r3, #0]
}
 800041a:	bf00      	nop
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	20000098 	.word	0x20000098

08000428 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void){
	// 1.Initialize the PSP with TASK1 stack start address
	//Get the value of PSP of current task
	asm volatile("PUSH {LR}"); //因為下一個指令要使用BL，會造成原本的LR corrupt，所以先存到stack
 8000428:	b500      	push	{lr}
	asm volatile("BL get_psp_value"); //不能用B，要用BL(with Link)，因為要回來，回來後current_task會被存在R0
 800042a:	f7ff ffbf 	bl	80003ac <get_psp_value>
	asm volatile("MSR PSP, R0"); //初始化PSP
 800042e:	f380 8809 	msr	PSP, r0
	asm volatile("POP {LR}"); //POP原本要回到main的LR
 8000432:	f85d eb04 	ldr.w	lr, [sp], #4

	// 2.Change Change SP to PSP using CONTROL register
	/* CONTROL reg是special reg，要用 MSR，所以要naked*/
	asm volatile("MOV R0,#0x02");
 8000436:	f04f 0002 	mov.w	r0, #2
	asm volatile("MSR CONTROL, R0");
 800043a:	f380 8814 	msr	CONTROL, r0
	asm volatile("BX LR");
 800043e:	4770      	bx	lr
}
 8000440:	bf00      	nop

08000442 <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler(void){
	/*Save the context of current task*/
	//1.Get current running task's PSP value
	asm volatile("MRS R0, PSP");
 8000442:	f3ef 8009 	mrs	r0, PSP

	//2. Using that PSP value store SF2(R4~R11)
	//這裡不能用PUSH，因為MSP會被影響
	asm volatile("STMDB R0!,{R4-R11}"); //R0更新PSP value, 儲存R4~R11
 8000446:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	asm volatile("PUSH {LR}"); //因為底下BL的function call會改掉LR，所以先做保存
 800044a:	b500      	push	{lr}

	//3.Save the current value of PSP
	asm volatile("BL save_psp_value");
 800044c:	f7ff ffc0 	bl	80003d0 <save_psp_value>


	/*Retrieve the context of next task*/
	//1.Decide the next task to run
	asm volatile("BL update_next_task");
 8000450:	f7ff ffd4 	bl	80003fc <update_next_task>

	//2.Get its past PSP value
	asm volatile("BL get_psp_value");
 8000454:	f7ff ffaa 	bl	80003ac <get_psp_value>

	//3.Using that PSP value retrieve SF2(R4~R11)
	asm volatile("LDMIA R0!, {R4-R11}");
 8000458:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4.Update PSP and exit
	asm volatile("MSR PSP, R0");
 800045c:	f380 8809 	msr	PSP, r0

	asm volatile("POP {LR}");
 8000460:	f85d eb04 	ldr.w	lr, [sp], #4

	/*由於是naked function，不會有epilogue，所以要自己寫exception exit*/
	asm volatile("BX LR");
 8000464:	4770      	bx	lr
}
 8000466:	bf00      	nop

08000468 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 800046c:	4802      	ldr	r0, [pc, #8]	@ (8000478 <HardFault_Handler+0x10>)
 800046e:	f000 fa27 	bl	80008c0 <puts>
	while(1);
 8000472:	bf00      	nop
 8000474:	e7fd      	b.n	8000472 <HardFault_Handler+0xa>
 8000476:	bf00      	nop
 8000478:	08001040 	.word	0x08001040

0800047c <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 8000480:	4802      	ldr	r0, [pc, #8]	@ (800048c <MemManage_Handler+0x10>)
 8000482:	f000 fa1d 	bl	80008c0 <puts>
	while(1);
 8000486:	bf00      	nop
 8000488:	e7fd      	b.n	8000486 <MemManage_Handler+0xa>
 800048a:	bf00      	nop
 800048c:	08001058 	.word	0x08001058

08000490 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 8000494:	4802      	ldr	r0, [pc, #8]	@ (80004a0 <BusFault_Handler+0x10>)
 8000496:	f000 fa13 	bl	80008c0 <puts>
	while(1);
 800049a:	bf00      	nop
 800049c:	e7fd      	b.n	800049a <BusFault_Handler+0xa>
 800049e:	bf00      	nop
 80004a0:	08001070 	.word	0x08001070

080004a4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004ae:	4b0f      	ldr	r3, [pc, #60]	@ (80004ec <ITM_SendChar+0x48>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a0e      	ldr	r2, [pc, #56]	@ (80004ec <ITM_SendChar+0x48>)
 80004b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004b8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004ba:	4b0d      	ldr	r3, [pc, #52]	@ (80004f0 <ITM_SendChar+0x4c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a0c      	ldr	r2, [pc, #48]	@ (80004f0 <ITM_SendChar+0x4c>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004c6:	bf00      	nop
 80004c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d0f8      	beq.n	80004c8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004d6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	6013      	str	r3, [r2, #0]
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	e000edfc 	.word	0xe000edfc
 80004f0:	e0000e00 	.word	0xe0000e00

080004f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	e00a      	b.n	800051c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000506:	f3af 8000 	nop.w
 800050a:	4601      	mov	r1, r0
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	60ba      	str	r2, [r7, #8]
 8000512:	b2ca      	uxtb	r2, r1
 8000514:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	3301      	adds	r3, #1
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	697a      	ldr	r2, [r7, #20]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	429a      	cmp	r2, r3
 8000522:	dbf0      	blt.n	8000506 <_read+0x12>
  }

  return len;
 8000524:	687b      	ldr	r3, [r7, #4]
}
 8000526:	4618      	mov	r0, r3
 8000528:	3718      	adds	r7, #24
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b086      	sub	sp, #24
 8000532:	af00      	add	r7, sp, #0
 8000534:	60f8      	str	r0, [r7, #12]
 8000536:	60b9      	str	r1, [r7, #8]
 8000538:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
 800053e:	e009      	b.n	8000554 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	1c5a      	adds	r2, r3, #1
 8000544:	60ba      	str	r2, [r7, #8]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ffab 	bl	80004a4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	3301      	adds	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	697a      	ldr	r2, [r7, #20]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	429a      	cmp	r2, r3
 800055a:	dbf1      	blt.n	8000540 <_write+0x12>
  }
  return len;
 800055c:	687b      	ldr	r3, [r7, #4]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <_close>:

int _close(int file)
{
 8000566:	b480      	push	{r7}
 8000568:	b083      	sub	sp, #12
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000572:	4618      	mov	r0, r3
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
 8000586:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800058e:	605a      	str	r2, [r3, #4]
  return 0;
 8000590:	2300      	movs	r3, #0
}
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <_isatty>:

int _isatty(int file)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005a6:	2301      	movs	r3, #1
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005d8:	4a14      	ldr	r2, [pc, #80]	@ (800062c <_sbrk+0x5c>)
 80005da:	4b15      	ldr	r3, [pc, #84]	@ (8000630 <_sbrk+0x60>)
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e4:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <_sbrk+0x64>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d102      	bne.n	80005f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <_sbrk+0x64>)
 80005ee:	4a12      	ldr	r2, [pc, #72]	@ (8000638 <_sbrk+0x68>)
 80005f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005f2:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <_sbrk+0x64>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	693a      	ldr	r2, [r7, #16]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d207      	bcs.n	8000610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000600:	f000 fa8c 	bl	8000b1c <__errno>
 8000604:	4603      	mov	r3, r0
 8000606:	220c      	movs	r2, #12
 8000608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	e009      	b.n	8000624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000610:	4b08      	ldr	r3, [pc, #32]	@ (8000634 <_sbrk+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000616:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <_sbrk+0x64>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	4a05      	ldr	r2, [pc, #20]	@ (8000634 <_sbrk+0x64>)
 8000620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000622:	68fb      	ldr	r3, [r7, #12]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20020000 	.word	0x20020000
 8000630:	00000400 	.word	0x00000400
 8000634:	2000009c 	.word	0x2000009c
 8000638:	200001f0 	.word	0x200001f0

0800063c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800063e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000640:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000644:	480c      	ldr	r0, [pc, #48]	@ (8000678 <LoopForever+0x6>)
  ldr r1, =_edata
 8000646:	490d      	ldr	r1, [pc, #52]	@ (800067c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000648:	4a0d      	ldr	r2, [pc, #52]	@ (8000680 <LoopForever+0xe>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800064c:	e002      	b.n	8000654 <LoopCopyDataInit>

0800064e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000652:	3304      	adds	r3, #4

08000654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000658:	d3f9      	bcc.n	800064e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065a:	4a0a      	ldr	r2, [pc, #40]	@ (8000684 <LoopForever+0x12>)
  ldr r4, =_ebss
 800065c:	4c0a      	ldr	r4, [pc, #40]	@ (8000688 <LoopForever+0x16>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000660:	e001      	b.n	8000666 <LoopFillZerobss>

08000662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000664:	3204      	adds	r2, #4

08000666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000668:	d3fb      	bcc.n	8000662 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800066a:	f000 fa5d 	bl	8000b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066e:	f7ff fdab 	bl	80001c8 <main>

08000672 <LoopForever>:

LoopForever:
  b LoopForever
 8000672:	e7fe      	b.n	8000672 <LoopForever>
  ldr   r0, =_estack
 8000674:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800067c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000680:	08001090 	.word	0x08001090
  ldr r2, =_sbss
 8000684:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000688:	200001ec 	.word	0x200001ec

0800068c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800068c:	e7fe      	b.n	800068c <ADC_IRQHandler>
	...

08000690 <std>:
 8000690:	2300      	movs	r3, #0
 8000692:	b510      	push	{r4, lr}
 8000694:	4604      	mov	r4, r0
 8000696:	e9c0 3300 	strd	r3, r3, [r0]
 800069a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800069e:	6083      	str	r3, [r0, #8]
 80006a0:	8181      	strh	r1, [r0, #12]
 80006a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80006a4:	81c2      	strh	r2, [r0, #14]
 80006a6:	6183      	str	r3, [r0, #24]
 80006a8:	4619      	mov	r1, r3
 80006aa:	2208      	movs	r2, #8
 80006ac:	305c      	adds	r0, #92	@ 0x5c
 80006ae:	f000 f9e7 	bl	8000a80 <memset>
 80006b2:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <std+0x58>)
 80006b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80006b6:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <std+0x5c>)
 80006b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006ba:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <std+0x60>)
 80006bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80006be:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <std+0x64>)
 80006c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80006c2:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <std+0x68>)
 80006c4:	6224      	str	r4, [r4, #32]
 80006c6:	429c      	cmp	r4, r3
 80006c8:	d006      	beq.n	80006d8 <std+0x48>
 80006ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006ce:	4294      	cmp	r4, r2
 80006d0:	d002      	beq.n	80006d8 <std+0x48>
 80006d2:	33d0      	adds	r3, #208	@ 0xd0
 80006d4:	429c      	cmp	r4, r3
 80006d6:	d105      	bne.n	80006e4 <std+0x54>
 80006d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80006dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006e0:	f000 ba46 	b.w	8000b70 <__retarget_lock_init_recursive>
 80006e4:	bd10      	pop	{r4, pc}
 80006e6:	bf00      	nop
 80006e8:	080008d1 	.word	0x080008d1
 80006ec:	080008f3 	.word	0x080008f3
 80006f0:	0800092b 	.word	0x0800092b
 80006f4:	0800094f 	.word	0x0800094f
 80006f8:	200000a0 	.word	0x200000a0

080006fc <stdio_exit_handler>:
 80006fc:	4a02      	ldr	r2, [pc, #8]	@ (8000708 <stdio_exit_handler+0xc>)
 80006fe:	4903      	ldr	r1, [pc, #12]	@ (800070c <stdio_exit_handler+0x10>)
 8000700:	4803      	ldr	r0, [pc, #12]	@ (8000710 <stdio_exit_handler+0x14>)
 8000702:	f000 b869 	b.w	80007d8 <_fwalk_sglue>
 8000706:	bf00      	nop
 8000708:	20000010 	.word	0x20000010
 800070c:	08000e71 	.word	0x08000e71
 8000710:	20000020 	.word	0x20000020

08000714 <cleanup_stdio>:
 8000714:	6841      	ldr	r1, [r0, #4]
 8000716:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <cleanup_stdio+0x34>)
 8000718:	4299      	cmp	r1, r3
 800071a:	b510      	push	{r4, lr}
 800071c:	4604      	mov	r4, r0
 800071e:	d001      	beq.n	8000724 <cleanup_stdio+0x10>
 8000720:	f000 fba6 	bl	8000e70 <_fflush_r>
 8000724:	68a1      	ldr	r1, [r4, #8]
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <cleanup_stdio+0x38>)
 8000728:	4299      	cmp	r1, r3
 800072a:	d002      	beq.n	8000732 <cleanup_stdio+0x1e>
 800072c:	4620      	mov	r0, r4
 800072e:	f000 fb9f 	bl	8000e70 <_fflush_r>
 8000732:	68e1      	ldr	r1, [r4, #12]
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <cleanup_stdio+0x3c>)
 8000736:	4299      	cmp	r1, r3
 8000738:	d004      	beq.n	8000744 <cleanup_stdio+0x30>
 800073a:	4620      	mov	r0, r4
 800073c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000740:	f000 bb96 	b.w	8000e70 <_fflush_r>
 8000744:	bd10      	pop	{r4, pc}
 8000746:	bf00      	nop
 8000748:	200000a0 	.word	0x200000a0
 800074c:	20000108 	.word	0x20000108
 8000750:	20000170 	.word	0x20000170

08000754 <global_stdio_init.part.0>:
 8000754:	b510      	push	{r4, lr}
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <global_stdio_init.part.0+0x30>)
 8000758:	4c0b      	ldr	r4, [pc, #44]	@ (8000788 <global_stdio_init.part.0+0x34>)
 800075a:	4a0c      	ldr	r2, [pc, #48]	@ (800078c <global_stdio_init.part.0+0x38>)
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	4620      	mov	r0, r4
 8000760:	2200      	movs	r2, #0
 8000762:	2104      	movs	r1, #4
 8000764:	f7ff ff94 	bl	8000690 <std>
 8000768:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800076c:	2201      	movs	r2, #1
 800076e:	2109      	movs	r1, #9
 8000770:	f7ff ff8e 	bl	8000690 <std>
 8000774:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000778:	2202      	movs	r2, #2
 800077a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800077e:	2112      	movs	r1, #18
 8000780:	f7ff bf86 	b.w	8000690 <std>
 8000784:	200001d8 	.word	0x200001d8
 8000788:	200000a0 	.word	0x200000a0
 800078c:	080006fd 	.word	0x080006fd

08000790 <__sfp_lock_acquire>:
 8000790:	4801      	ldr	r0, [pc, #4]	@ (8000798 <__sfp_lock_acquire+0x8>)
 8000792:	f000 b9ee 	b.w	8000b72 <__retarget_lock_acquire_recursive>
 8000796:	bf00      	nop
 8000798:	200001e1 	.word	0x200001e1

0800079c <__sfp_lock_release>:
 800079c:	4801      	ldr	r0, [pc, #4]	@ (80007a4 <__sfp_lock_release+0x8>)
 800079e:	f000 b9e9 	b.w	8000b74 <__retarget_lock_release_recursive>
 80007a2:	bf00      	nop
 80007a4:	200001e1 	.word	0x200001e1

080007a8 <__sinit>:
 80007a8:	b510      	push	{r4, lr}
 80007aa:	4604      	mov	r4, r0
 80007ac:	f7ff fff0 	bl	8000790 <__sfp_lock_acquire>
 80007b0:	6a23      	ldr	r3, [r4, #32]
 80007b2:	b11b      	cbz	r3, 80007bc <__sinit+0x14>
 80007b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007b8:	f7ff bff0 	b.w	800079c <__sfp_lock_release>
 80007bc:	4b04      	ldr	r3, [pc, #16]	@ (80007d0 <__sinit+0x28>)
 80007be:	6223      	str	r3, [r4, #32]
 80007c0:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <__sinit+0x2c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d1f5      	bne.n	80007b4 <__sinit+0xc>
 80007c8:	f7ff ffc4 	bl	8000754 <global_stdio_init.part.0>
 80007cc:	e7f2      	b.n	80007b4 <__sinit+0xc>
 80007ce:	bf00      	nop
 80007d0:	08000715 	.word	0x08000715
 80007d4:	200001d8 	.word	0x200001d8

080007d8 <_fwalk_sglue>:
 80007d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007dc:	4607      	mov	r7, r0
 80007de:	4688      	mov	r8, r1
 80007e0:	4614      	mov	r4, r2
 80007e2:	2600      	movs	r6, #0
 80007e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007e8:	f1b9 0901 	subs.w	r9, r9, #1
 80007ec:	d505      	bpl.n	80007fa <_fwalk_sglue+0x22>
 80007ee:	6824      	ldr	r4, [r4, #0]
 80007f0:	2c00      	cmp	r4, #0
 80007f2:	d1f7      	bne.n	80007e4 <_fwalk_sglue+0xc>
 80007f4:	4630      	mov	r0, r6
 80007f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007fa:	89ab      	ldrh	r3, [r5, #12]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d907      	bls.n	8000810 <_fwalk_sglue+0x38>
 8000800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000804:	3301      	adds	r3, #1
 8000806:	d003      	beq.n	8000810 <_fwalk_sglue+0x38>
 8000808:	4629      	mov	r1, r5
 800080a:	4638      	mov	r0, r7
 800080c:	47c0      	blx	r8
 800080e:	4306      	orrs	r6, r0
 8000810:	3568      	adds	r5, #104	@ 0x68
 8000812:	e7e9      	b.n	80007e8 <_fwalk_sglue+0x10>

08000814 <_puts_r>:
 8000814:	6a03      	ldr	r3, [r0, #32]
 8000816:	b570      	push	{r4, r5, r6, lr}
 8000818:	6884      	ldr	r4, [r0, #8]
 800081a:	4605      	mov	r5, r0
 800081c:	460e      	mov	r6, r1
 800081e:	b90b      	cbnz	r3, 8000824 <_puts_r+0x10>
 8000820:	f7ff ffc2 	bl	80007a8 <__sinit>
 8000824:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000826:	07db      	lsls	r3, r3, #31
 8000828:	d405      	bmi.n	8000836 <_puts_r+0x22>
 800082a:	89a3      	ldrh	r3, [r4, #12]
 800082c:	0598      	lsls	r0, r3, #22
 800082e:	d402      	bmi.n	8000836 <_puts_r+0x22>
 8000830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000832:	f000 f99e 	bl	8000b72 <__retarget_lock_acquire_recursive>
 8000836:	89a3      	ldrh	r3, [r4, #12]
 8000838:	0719      	lsls	r1, r3, #28
 800083a:	d502      	bpl.n	8000842 <_puts_r+0x2e>
 800083c:	6923      	ldr	r3, [r4, #16]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d135      	bne.n	80008ae <_puts_r+0x9a>
 8000842:	4621      	mov	r1, r4
 8000844:	4628      	mov	r0, r5
 8000846:	f000 f8c5 	bl	80009d4 <__swsetup_r>
 800084a:	b380      	cbz	r0, 80008ae <_puts_r+0x9a>
 800084c:	f04f 35ff 	mov.w	r5, #4294967295
 8000850:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000852:	07da      	lsls	r2, r3, #31
 8000854:	d405      	bmi.n	8000862 <_puts_r+0x4e>
 8000856:	89a3      	ldrh	r3, [r4, #12]
 8000858:	059b      	lsls	r3, r3, #22
 800085a:	d402      	bmi.n	8000862 <_puts_r+0x4e>
 800085c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800085e:	f000 f989 	bl	8000b74 <__retarget_lock_release_recursive>
 8000862:	4628      	mov	r0, r5
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	2b00      	cmp	r3, #0
 8000868:	da04      	bge.n	8000874 <_puts_r+0x60>
 800086a:	69a2      	ldr	r2, [r4, #24]
 800086c:	429a      	cmp	r2, r3
 800086e:	dc17      	bgt.n	80008a0 <_puts_r+0x8c>
 8000870:	290a      	cmp	r1, #10
 8000872:	d015      	beq.n	80008a0 <_puts_r+0x8c>
 8000874:	6823      	ldr	r3, [r4, #0]
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	6022      	str	r2, [r4, #0]
 800087a:	7019      	strb	r1, [r3, #0]
 800087c:	68a3      	ldr	r3, [r4, #8]
 800087e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000882:	3b01      	subs	r3, #1
 8000884:	60a3      	str	r3, [r4, #8]
 8000886:	2900      	cmp	r1, #0
 8000888:	d1ed      	bne.n	8000866 <_puts_r+0x52>
 800088a:	2b00      	cmp	r3, #0
 800088c:	da11      	bge.n	80008b2 <_puts_r+0x9e>
 800088e:	4622      	mov	r2, r4
 8000890:	210a      	movs	r1, #10
 8000892:	4628      	mov	r0, r5
 8000894:	f000 f85f 	bl	8000956 <__swbuf_r>
 8000898:	3001      	adds	r0, #1
 800089a:	d0d7      	beq.n	800084c <_puts_r+0x38>
 800089c:	250a      	movs	r5, #10
 800089e:	e7d7      	b.n	8000850 <_puts_r+0x3c>
 80008a0:	4622      	mov	r2, r4
 80008a2:	4628      	mov	r0, r5
 80008a4:	f000 f857 	bl	8000956 <__swbuf_r>
 80008a8:	3001      	adds	r0, #1
 80008aa:	d1e7      	bne.n	800087c <_puts_r+0x68>
 80008ac:	e7ce      	b.n	800084c <_puts_r+0x38>
 80008ae:	3e01      	subs	r6, #1
 80008b0:	e7e4      	b.n	800087c <_puts_r+0x68>
 80008b2:	6823      	ldr	r3, [r4, #0]
 80008b4:	1c5a      	adds	r2, r3, #1
 80008b6:	6022      	str	r2, [r4, #0]
 80008b8:	220a      	movs	r2, #10
 80008ba:	701a      	strb	r2, [r3, #0]
 80008bc:	e7ee      	b.n	800089c <_puts_r+0x88>
	...

080008c0 <puts>:
 80008c0:	4b02      	ldr	r3, [pc, #8]	@ (80008cc <puts+0xc>)
 80008c2:	4601      	mov	r1, r0
 80008c4:	6818      	ldr	r0, [r3, #0]
 80008c6:	f7ff bfa5 	b.w	8000814 <_puts_r>
 80008ca:	bf00      	nop
 80008cc:	2000001c 	.word	0x2000001c

080008d0 <__sread>:
 80008d0:	b510      	push	{r4, lr}
 80008d2:	460c      	mov	r4, r1
 80008d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008d8:	f000 f8fc 	bl	8000ad4 <_read_r>
 80008dc:	2800      	cmp	r0, #0
 80008de:	bfab      	itete	ge
 80008e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80008e2:	89a3      	ldrhlt	r3, [r4, #12]
 80008e4:	181b      	addge	r3, r3, r0
 80008e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80008ea:	bfac      	ite	ge
 80008ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80008ee:	81a3      	strhlt	r3, [r4, #12]
 80008f0:	bd10      	pop	{r4, pc}

080008f2 <__swrite>:
 80008f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008f6:	461f      	mov	r7, r3
 80008f8:	898b      	ldrh	r3, [r1, #12]
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	4605      	mov	r5, r0
 80008fe:	460c      	mov	r4, r1
 8000900:	4616      	mov	r6, r2
 8000902:	d505      	bpl.n	8000910 <__swrite+0x1e>
 8000904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000908:	2302      	movs	r3, #2
 800090a:	2200      	movs	r2, #0
 800090c:	f000 f8d0 	bl	8000ab0 <_lseek_r>
 8000910:	89a3      	ldrh	r3, [r4, #12]
 8000912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000916:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800091a:	81a3      	strh	r3, [r4, #12]
 800091c:	4632      	mov	r2, r6
 800091e:	463b      	mov	r3, r7
 8000920:	4628      	mov	r0, r5
 8000922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000926:	f000 b8e7 	b.w	8000af8 <_write_r>

0800092a <__sseek>:
 800092a:	b510      	push	{r4, lr}
 800092c:	460c      	mov	r4, r1
 800092e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000932:	f000 f8bd 	bl	8000ab0 <_lseek_r>
 8000936:	1c43      	adds	r3, r0, #1
 8000938:	89a3      	ldrh	r3, [r4, #12]
 800093a:	bf15      	itete	ne
 800093c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800093e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000942:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000946:	81a3      	strheq	r3, [r4, #12]
 8000948:	bf18      	it	ne
 800094a:	81a3      	strhne	r3, [r4, #12]
 800094c:	bd10      	pop	{r4, pc}

0800094e <__sclose>:
 800094e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000952:	f000 b89d 	b.w	8000a90 <_close_r>

08000956 <__swbuf_r>:
 8000956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000958:	460e      	mov	r6, r1
 800095a:	4614      	mov	r4, r2
 800095c:	4605      	mov	r5, r0
 800095e:	b118      	cbz	r0, 8000968 <__swbuf_r+0x12>
 8000960:	6a03      	ldr	r3, [r0, #32]
 8000962:	b90b      	cbnz	r3, 8000968 <__swbuf_r+0x12>
 8000964:	f7ff ff20 	bl	80007a8 <__sinit>
 8000968:	69a3      	ldr	r3, [r4, #24]
 800096a:	60a3      	str	r3, [r4, #8]
 800096c:	89a3      	ldrh	r3, [r4, #12]
 800096e:	071a      	lsls	r2, r3, #28
 8000970:	d501      	bpl.n	8000976 <__swbuf_r+0x20>
 8000972:	6923      	ldr	r3, [r4, #16]
 8000974:	b943      	cbnz	r3, 8000988 <__swbuf_r+0x32>
 8000976:	4621      	mov	r1, r4
 8000978:	4628      	mov	r0, r5
 800097a:	f000 f82b 	bl	80009d4 <__swsetup_r>
 800097e:	b118      	cbz	r0, 8000988 <__swbuf_r+0x32>
 8000980:	f04f 37ff 	mov.w	r7, #4294967295
 8000984:	4638      	mov	r0, r7
 8000986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000988:	6823      	ldr	r3, [r4, #0]
 800098a:	6922      	ldr	r2, [r4, #16]
 800098c:	1a98      	subs	r0, r3, r2
 800098e:	6963      	ldr	r3, [r4, #20]
 8000990:	b2f6      	uxtb	r6, r6
 8000992:	4283      	cmp	r3, r0
 8000994:	4637      	mov	r7, r6
 8000996:	dc05      	bgt.n	80009a4 <__swbuf_r+0x4e>
 8000998:	4621      	mov	r1, r4
 800099a:	4628      	mov	r0, r5
 800099c:	f000 fa68 	bl	8000e70 <_fflush_r>
 80009a0:	2800      	cmp	r0, #0
 80009a2:	d1ed      	bne.n	8000980 <__swbuf_r+0x2a>
 80009a4:	68a3      	ldr	r3, [r4, #8]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	60a3      	str	r3, [r4, #8]
 80009aa:	6823      	ldr	r3, [r4, #0]
 80009ac:	1c5a      	adds	r2, r3, #1
 80009ae:	6022      	str	r2, [r4, #0]
 80009b0:	701e      	strb	r6, [r3, #0]
 80009b2:	6962      	ldr	r2, [r4, #20]
 80009b4:	1c43      	adds	r3, r0, #1
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d004      	beq.n	80009c4 <__swbuf_r+0x6e>
 80009ba:	89a3      	ldrh	r3, [r4, #12]
 80009bc:	07db      	lsls	r3, r3, #31
 80009be:	d5e1      	bpl.n	8000984 <__swbuf_r+0x2e>
 80009c0:	2e0a      	cmp	r6, #10
 80009c2:	d1df      	bne.n	8000984 <__swbuf_r+0x2e>
 80009c4:	4621      	mov	r1, r4
 80009c6:	4628      	mov	r0, r5
 80009c8:	f000 fa52 	bl	8000e70 <_fflush_r>
 80009cc:	2800      	cmp	r0, #0
 80009ce:	d0d9      	beq.n	8000984 <__swbuf_r+0x2e>
 80009d0:	e7d6      	b.n	8000980 <__swbuf_r+0x2a>
	...

080009d4 <__swsetup_r>:
 80009d4:	b538      	push	{r3, r4, r5, lr}
 80009d6:	4b29      	ldr	r3, [pc, #164]	@ (8000a7c <__swsetup_r+0xa8>)
 80009d8:	4605      	mov	r5, r0
 80009da:	6818      	ldr	r0, [r3, #0]
 80009dc:	460c      	mov	r4, r1
 80009de:	b118      	cbz	r0, 80009e8 <__swsetup_r+0x14>
 80009e0:	6a03      	ldr	r3, [r0, #32]
 80009e2:	b90b      	cbnz	r3, 80009e8 <__swsetup_r+0x14>
 80009e4:	f7ff fee0 	bl	80007a8 <__sinit>
 80009e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009ec:	0719      	lsls	r1, r3, #28
 80009ee:	d422      	bmi.n	8000a36 <__swsetup_r+0x62>
 80009f0:	06da      	lsls	r2, r3, #27
 80009f2:	d407      	bmi.n	8000a04 <__swsetup_r+0x30>
 80009f4:	2209      	movs	r2, #9
 80009f6:	602a      	str	r2, [r5, #0]
 80009f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009fc:	81a3      	strh	r3, [r4, #12]
 80009fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000a02:	e033      	b.n	8000a6c <__swsetup_r+0x98>
 8000a04:	0758      	lsls	r0, r3, #29
 8000a06:	d512      	bpl.n	8000a2e <__swsetup_r+0x5a>
 8000a08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000a0a:	b141      	cbz	r1, 8000a1e <__swsetup_r+0x4a>
 8000a0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000a10:	4299      	cmp	r1, r3
 8000a12:	d002      	beq.n	8000a1a <__swsetup_r+0x46>
 8000a14:	4628      	mov	r0, r5
 8000a16:	f000 f8af 	bl	8000b78 <_free_r>
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8000a1e:	89a3      	ldrh	r3, [r4, #12]
 8000a20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000a24:	81a3      	strh	r3, [r4, #12]
 8000a26:	2300      	movs	r3, #0
 8000a28:	6063      	str	r3, [r4, #4]
 8000a2a:	6923      	ldr	r3, [r4, #16]
 8000a2c:	6023      	str	r3, [r4, #0]
 8000a2e:	89a3      	ldrh	r3, [r4, #12]
 8000a30:	f043 0308 	orr.w	r3, r3, #8
 8000a34:	81a3      	strh	r3, [r4, #12]
 8000a36:	6923      	ldr	r3, [r4, #16]
 8000a38:	b94b      	cbnz	r3, 8000a4e <__swsetup_r+0x7a>
 8000a3a:	89a3      	ldrh	r3, [r4, #12]
 8000a3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000a44:	d003      	beq.n	8000a4e <__swsetup_r+0x7a>
 8000a46:	4621      	mov	r1, r4
 8000a48:	4628      	mov	r0, r5
 8000a4a:	f000 fa5f 	bl	8000f0c <__smakebuf_r>
 8000a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a52:	f013 0201 	ands.w	r2, r3, #1
 8000a56:	d00a      	beq.n	8000a6e <__swsetup_r+0x9a>
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60a2      	str	r2, [r4, #8]
 8000a5c:	6962      	ldr	r2, [r4, #20]
 8000a5e:	4252      	negs	r2, r2
 8000a60:	61a2      	str	r2, [r4, #24]
 8000a62:	6922      	ldr	r2, [r4, #16]
 8000a64:	b942      	cbnz	r2, 8000a78 <__swsetup_r+0xa4>
 8000a66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000a6a:	d1c5      	bne.n	80009f8 <__swsetup_r+0x24>
 8000a6c:	bd38      	pop	{r3, r4, r5, pc}
 8000a6e:	0799      	lsls	r1, r3, #30
 8000a70:	bf58      	it	pl
 8000a72:	6962      	ldrpl	r2, [r4, #20]
 8000a74:	60a2      	str	r2, [r4, #8]
 8000a76:	e7f4      	b.n	8000a62 <__swsetup_r+0x8e>
 8000a78:	2000      	movs	r0, #0
 8000a7a:	e7f7      	b.n	8000a6c <__swsetup_r+0x98>
 8000a7c:	2000001c 	.word	0x2000001c

08000a80 <memset>:
 8000a80:	4402      	add	r2, r0
 8000a82:	4603      	mov	r3, r0
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d100      	bne.n	8000a8a <memset+0xa>
 8000a88:	4770      	bx	lr
 8000a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8000a8e:	e7f9      	b.n	8000a84 <memset+0x4>

08000a90 <_close_r>:
 8000a90:	b538      	push	{r3, r4, r5, lr}
 8000a92:	4d06      	ldr	r5, [pc, #24]	@ (8000aac <_close_r+0x1c>)
 8000a94:	2300      	movs	r3, #0
 8000a96:	4604      	mov	r4, r0
 8000a98:	4608      	mov	r0, r1
 8000a9a:	602b      	str	r3, [r5, #0]
 8000a9c:	f7ff fd63 	bl	8000566 <_close>
 8000aa0:	1c43      	adds	r3, r0, #1
 8000aa2:	d102      	bne.n	8000aaa <_close_r+0x1a>
 8000aa4:	682b      	ldr	r3, [r5, #0]
 8000aa6:	b103      	cbz	r3, 8000aaa <_close_r+0x1a>
 8000aa8:	6023      	str	r3, [r4, #0]
 8000aaa:	bd38      	pop	{r3, r4, r5, pc}
 8000aac:	200001dc 	.word	0x200001dc

08000ab0 <_lseek_r>:
 8000ab0:	b538      	push	{r3, r4, r5, lr}
 8000ab2:	4d07      	ldr	r5, [pc, #28]	@ (8000ad0 <_lseek_r+0x20>)
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4608      	mov	r0, r1
 8000ab8:	4611      	mov	r1, r2
 8000aba:	2200      	movs	r2, #0
 8000abc:	602a      	str	r2, [r5, #0]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	f7ff fd78 	bl	80005b4 <_lseek>
 8000ac4:	1c43      	adds	r3, r0, #1
 8000ac6:	d102      	bne.n	8000ace <_lseek_r+0x1e>
 8000ac8:	682b      	ldr	r3, [r5, #0]
 8000aca:	b103      	cbz	r3, 8000ace <_lseek_r+0x1e>
 8000acc:	6023      	str	r3, [r4, #0]
 8000ace:	bd38      	pop	{r3, r4, r5, pc}
 8000ad0:	200001dc 	.word	0x200001dc

08000ad4 <_read_r>:
 8000ad4:	b538      	push	{r3, r4, r5, lr}
 8000ad6:	4d07      	ldr	r5, [pc, #28]	@ (8000af4 <_read_r+0x20>)
 8000ad8:	4604      	mov	r4, r0
 8000ada:	4608      	mov	r0, r1
 8000adc:	4611      	mov	r1, r2
 8000ade:	2200      	movs	r2, #0
 8000ae0:	602a      	str	r2, [r5, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	f7ff fd06 	bl	80004f4 <_read>
 8000ae8:	1c43      	adds	r3, r0, #1
 8000aea:	d102      	bne.n	8000af2 <_read_r+0x1e>
 8000aec:	682b      	ldr	r3, [r5, #0]
 8000aee:	b103      	cbz	r3, 8000af2 <_read_r+0x1e>
 8000af0:	6023      	str	r3, [r4, #0]
 8000af2:	bd38      	pop	{r3, r4, r5, pc}
 8000af4:	200001dc 	.word	0x200001dc

08000af8 <_write_r>:
 8000af8:	b538      	push	{r3, r4, r5, lr}
 8000afa:	4d07      	ldr	r5, [pc, #28]	@ (8000b18 <_write_r+0x20>)
 8000afc:	4604      	mov	r4, r0
 8000afe:	4608      	mov	r0, r1
 8000b00:	4611      	mov	r1, r2
 8000b02:	2200      	movs	r2, #0
 8000b04:	602a      	str	r2, [r5, #0]
 8000b06:	461a      	mov	r2, r3
 8000b08:	f7ff fd11 	bl	800052e <_write>
 8000b0c:	1c43      	adds	r3, r0, #1
 8000b0e:	d102      	bne.n	8000b16 <_write_r+0x1e>
 8000b10:	682b      	ldr	r3, [r5, #0]
 8000b12:	b103      	cbz	r3, 8000b16 <_write_r+0x1e>
 8000b14:	6023      	str	r3, [r4, #0]
 8000b16:	bd38      	pop	{r3, r4, r5, pc}
 8000b18:	200001dc 	.word	0x200001dc

08000b1c <__errno>:
 8000b1c:	4b01      	ldr	r3, [pc, #4]	@ (8000b24 <__errno+0x8>)
 8000b1e:	6818      	ldr	r0, [r3, #0]
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2000001c 	.word	0x2000001c

08000b28 <__libc_init_array>:
 8000b28:	b570      	push	{r4, r5, r6, lr}
 8000b2a:	4d0d      	ldr	r5, [pc, #52]	@ (8000b60 <__libc_init_array+0x38>)
 8000b2c:	4c0d      	ldr	r4, [pc, #52]	@ (8000b64 <__libc_init_array+0x3c>)
 8000b2e:	1b64      	subs	r4, r4, r5
 8000b30:	10a4      	asrs	r4, r4, #2
 8000b32:	2600      	movs	r6, #0
 8000b34:	42a6      	cmp	r6, r4
 8000b36:	d109      	bne.n	8000b4c <__libc_init_array+0x24>
 8000b38:	4d0b      	ldr	r5, [pc, #44]	@ (8000b68 <__libc_init_array+0x40>)
 8000b3a:	4c0c      	ldr	r4, [pc, #48]	@ (8000b6c <__libc_init_array+0x44>)
 8000b3c:	f000 fa54 	bl	8000fe8 <_init>
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	10a4      	asrs	r4, r4, #2
 8000b44:	2600      	movs	r6, #0
 8000b46:	42a6      	cmp	r6, r4
 8000b48:	d105      	bne.n	8000b56 <__libc_init_array+0x2e>
 8000b4a:	bd70      	pop	{r4, r5, r6, pc}
 8000b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b50:	4798      	blx	r3
 8000b52:	3601      	adds	r6, #1
 8000b54:	e7ee      	b.n	8000b34 <__libc_init_array+0xc>
 8000b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b5a:	4798      	blx	r3
 8000b5c:	3601      	adds	r6, #1
 8000b5e:	e7f2      	b.n	8000b46 <__libc_init_array+0x1e>
 8000b60:	08001088 	.word	0x08001088
 8000b64:	08001088 	.word	0x08001088
 8000b68:	08001088 	.word	0x08001088
 8000b6c:	0800108c 	.word	0x0800108c

08000b70 <__retarget_lock_init_recursive>:
 8000b70:	4770      	bx	lr

08000b72 <__retarget_lock_acquire_recursive>:
 8000b72:	4770      	bx	lr

08000b74 <__retarget_lock_release_recursive>:
 8000b74:	4770      	bx	lr
	...

08000b78 <_free_r>:
 8000b78:	b538      	push	{r3, r4, r5, lr}
 8000b7a:	4605      	mov	r5, r0
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d041      	beq.n	8000c04 <_free_r+0x8c>
 8000b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b84:	1f0c      	subs	r4, r1, #4
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bfb8      	it	lt
 8000b8a:	18e4      	addlt	r4, r4, r3
 8000b8c:	f000 f8e0 	bl	8000d50 <__malloc_lock>
 8000b90:	4a1d      	ldr	r2, [pc, #116]	@ (8000c08 <_free_r+0x90>)
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	b933      	cbnz	r3, 8000ba4 <_free_r+0x2c>
 8000b96:	6063      	str	r3, [r4, #4]
 8000b98:	6014      	str	r4, [r2, #0]
 8000b9a:	4628      	mov	r0, r5
 8000b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ba0:	f000 b8dc 	b.w	8000d5c <__malloc_unlock>
 8000ba4:	42a3      	cmp	r3, r4
 8000ba6:	d908      	bls.n	8000bba <_free_r+0x42>
 8000ba8:	6820      	ldr	r0, [r4, #0]
 8000baa:	1821      	adds	r1, r4, r0
 8000bac:	428b      	cmp	r3, r1
 8000bae:	bf01      	itttt	eq
 8000bb0:	6819      	ldreq	r1, [r3, #0]
 8000bb2:	685b      	ldreq	r3, [r3, #4]
 8000bb4:	1809      	addeq	r1, r1, r0
 8000bb6:	6021      	streq	r1, [r4, #0]
 8000bb8:	e7ed      	b.n	8000b96 <_free_r+0x1e>
 8000bba:	461a      	mov	r2, r3
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	b10b      	cbz	r3, 8000bc4 <_free_r+0x4c>
 8000bc0:	42a3      	cmp	r3, r4
 8000bc2:	d9fa      	bls.n	8000bba <_free_r+0x42>
 8000bc4:	6811      	ldr	r1, [r2, #0]
 8000bc6:	1850      	adds	r0, r2, r1
 8000bc8:	42a0      	cmp	r0, r4
 8000bca:	d10b      	bne.n	8000be4 <_free_r+0x6c>
 8000bcc:	6820      	ldr	r0, [r4, #0]
 8000bce:	4401      	add	r1, r0
 8000bd0:	1850      	adds	r0, r2, r1
 8000bd2:	4283      	cmp	r3, r0
 8000bd4:	6011      	str	r1, [r2, #0]
 8000bd6:	d1e0      	bne.n	8000b9a <_free_r+0x22>
 8000bd8:	6818      	ldr	r0, [r3, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	6053      	str	r3, [r2, #4]
 8000bde:	4408      	add	r0, r1
 8000be0:	6010      	str	r0, [r2, #0]
 8000be2:	e7da      	b.n	8000b9a <_free_r+0x22>
 8000be4:	d902      	bls.n	8000bec <_free_r+0x74>
 8000be6:	230c      	movs	r3, #12
 8000be8:	602b      	str	r3, [r5, #0]
 8000bea:	e7d6      	b.n	8000b9a <_free_r+0x22>
 8000bec:	6820      	ldr	r0, [r4, #0]
 8000bee:	1821      	adds	r1, r4, r0
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	bf04      	itt	eq
 8000bf4:	6819      	ldreq	r1, [r3, #0]
 8000bf6:	685b      	ldreq	r3, [r3, #4]
 8000bf8:	6063      	str	r3, [r4, #4]
 8000bfa:	bf04      	itt	eq
 8000bfc:	1809      	addeq	r1, r1, r0
 8000bfe:	6021      	streq	r1, [r4, #0]
 8000c00:	6054      	str	r4, [r2, #4]
 8000c02:	e7ca      	b.n	8000b9a <_free_r+0x22>
 8000c04:	bd38      	pop	{r3, r4, r5, pc}
 8000c06:	bf00      	nop
 8000c08:	200001e8 	.word	0x200001e8

08000c0c <sbrk_aligned>:
 8000c0c:	b570      	push	{r4, r5, r6, lr}
 8000c0e:	4e0f      	ldr	r6, [pc, #60]	@ (8000c4c <sbrk_aligned+0x40>)
 8000c10:	460c      	mov	r4, r1
 8000c12:	6831      	ldr	r1, [r6, #0]
 8000c14:	4605      	mov	r5, r0
 8000c16:	b911      	cbnz	r1, 8000c1e <sbrk_aligned+0x12>
 8000c18:	f000 f9d6 	bl	8000fc8 <_sbrk_r>
 8000c1c:	6030      	str	r0, [r6, #0]
 8000c1e:	4621      	mov	r1, r4
 8000c20:	4628      	mov	r0, r5
 8000c22:	f000 f9d1 	bl	8000fc8 <_sbrk_r>
 8000c26:	1c43      	adds	r3, r0, #1
 8000c28:	d103      	bne.n	8000c32 <sbrk_aligned+0x26>
 8000c2a:	f04f 34ff 	mov.w	r4, #4294967295
 8000c2e:	4620      	mov	r0, r4
 8000c30:	bd70      	pop	{r4, r5, r6, pc}
 8000c32:	1cc4      	adds	r4, r0, #3
 8000c34:	f024 0403 	bic.w	r4, r4, #3
 8000c38:	42a0      	cmp	r0, r4
 8000c3a:	d0f8      	beq.n	8000c2e <sbrk_aligned+0x22>
 8000c3c:	1a21      	subs	r1, r4, r0
 8000c3e:	4628      	mov	r0, r5
 8000c40:	f000 f9c2 	bl	8000fc8 <_sbrk_r>
 8000c44:	3001      	adds	r0, #1
 8000c46:	d1f2      	bne.n	8000c2e <sbrk_aligned+0x22>
 8000c48:	e7ef      	b.n	8000c2a <sbrk_aligned+0x1e>
 8000c4a:	bf00      	nop
 8000c4c:	200001e4 	.word	0x200001e4

08000c50 <_malloc_r>:
 8000c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c54:	1ccd      	adds	r5, r1, #3
 8000c56:	f025 0503 	bic.w	r5, r5, #3
 8000c5a:	3508      	adds	r5, #8
 8000c5c:	2d0c      	cmp	r5, #12
 8000c5e:	bf38      	it	cc
 8000c60:	250c      	movcc	r5, #12
 8000c62:	2d00      	cmp	r5, #0
 8000c64:	4606      	mov	r6, r0
 8000c66:	db01      	blt.n	8000c6c <_malloc_r+0x1c>
 8000c68:	42a9      	cmp	r1, r5
 8000c6a:	d904      	bls.n	8000c76 <_malloc_r+0x26>
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	6033      	str	r3, [r6, #0]
 8000c70:	2000      	movs	r0, #0
 8000c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d4c <_malloc_r+0xfc>
 8000c7a:	f000 f869 	bl	8000d50 <__malloc_lock>
 8000c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8000c82:	461c      	mov	r4, r3
 8000c84:	bb44      	cbnz	r4, 8000cd8 <_malloc_r+0x88>
 8000c86:	4629      	mov	r1, r5
 8000c88:	4630      	mov	r0, r6
 8000c8a:	f7ff ffbf 	bl	8000c0c <sbrk_aligned>
 8000c8e:	1c43      	adds	r3, r0, #1
 8000c90:	4604      	mov	r4, r0
 8000c92:	d158      	bne.n	8000d46 <_malloc_r+0xf6>
 8000c94:	f8d8 4000 	ldr.w	r4, [r8]
 8000c98:	4627      	mov	r7, r4
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d143      	bne.n	8000d26 <_malloc_r+0xd6>
 8000c9e:	2c00      	cmp	r4, #0
 8000ca0:	d04b      	beq.n	8000d3a <_malloc_r+0xea>
 8000ca2:	6823      	ldr	r3, [r4, #0]
 8000ca4:	4639      	mov	r1, r7
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	eb04 0903 	add.w	r9, r4, r3
 8000cac:	f000 f98c 	bl	8000fc8 <_sbrk_r>
 8000cb0:	4581      	cmp	r9, r0
 8000cb2:	d142      	bne.n	8000d3a <_malloc_r+0xea>
 8000cb4:	6821      	ldr	r1, [r4, #0]
 8000cb6:	1a6d      	subs	r5, r5, r1
 8000cb8:	4629      	mov	r1, r5
 8000cba:	4630      	mov	r0, r6
 8000cbc:	f7ff ffa6 	bl	8000c0c <sbrk_aligned>
 8000cc0:	3001      	adds	r0, #1
 8000cc2:	d03a      	beq.n	8000d3a <_malloc_r+0xea>
 8000cc4:	6823      	ldr	r3, [r4, #0]
 8000cc6:	442b      	add	r3, r5
 8000cc8:	6023      	str	r3, [r4, #0]
 8000cca:	f8d8 3000 	ldr.w	r3, [r8]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	bb62      	cbnz	r2, 8000d2c <_malloc_r+0xdc>
 8000cd2:	f8c8 7000 	str.w	r7, [r8]
 8000cd6:	e00f      	b.n	8000cf8 <_malloc_r+0xa8>
 8000cd8:	6822      	ldr	r2, [r4, #0]
 8000cda:	1b52      	subs	r2, r2, r5
 8000cdc:	d420      	bmi.n	8000d20 <_malloc_r+0xd0>
 8000cde:	2a0b      	cmp	r2, #11
 8000ce0:	d917      	bls.n	8000d12 <_malloc_r+0xc2>
 8000ce2:	1961      	adds	r1, r4, r5
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	6025      	str	r5, [r4, #0]
 8000ce8:	bf18      	it	ne
 8000cea:	6059      	strne	r1, [r3, #4]
 8000cec:	6863      	ldr	r3, [r4, #4]
 8000cee:	bf08      	it	eq
 8000cf0:	f8c8 1000 	streq.w	r1, [r8]
 8000cf4:	5162      	str	r2, [r4, r5]
 8000cf6:	604b      	str	r3, [r1, #4]
 8000cf8:	4630      	mov	r0, r6
 8000cfa:	f000 f82f 	bl	8000d5c <__malloc_unlock>
 8000cfe:	f104 000b 	add.w	r0, r4, #11
 8000d02:	1d23      	adds	r3, r4, #4
 8000d04:	f020 0007 	bic.w	r0, r0, #7
 8000d08:	1ac2      	subs	r2, r0, r3
 8000d0a:	bf1c      	itt	ne
 8000d0c:	1a1b      	subne	r3, r3, r0
 8000d0e:	50a3      	strne	r3, [r4, r2]
 8000d10:	e7af      	b.n	8000c72 <_malloc_r+0x22>
 8000d12:	6862      	ldr	r2, [r4, #4]
 8000d14:	42a3      	cmp	r3, r4
 8000d16:	bf0c      	ite	eq
 8000d18:	f8c8 2000 	streq.w	r2, [r8]
 8000d1c:	605a      	strne	r2, [r3, #4]
 8000d1e:	e7eb      	b.n	8000cf8 <_malloc_r+0xa8>
 8000d20:	4623      	mov	r3, r4
 8000d22:	6864      	ldr	r4, [r4, #4]
 8000d24:	e7ae      	b.n	8000c84 <_malloc_r+0x34>
 8000d26:	463c      	mov	r4, r7
 8000d28:	687f      	ldr	r7, [r7, #4]
 8000d2a:	e7b6      	b.n	8000c9a <_malloc_r+0x4a>
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	42a3      	cmp	r3, r4
 8000d32:	d1fb      	bne.n	8000d2c <_malloc_r+0xdc>
 8000d34:	2300      	movs	r3, #0
 8000d36:	6053      	str	r3, [r2, #4]
 8000d38:	e7de      	b.n	8000cf8 <_malloc_r+0xa8>
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	6033      	str	r3, [r6, #0]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	f000 f80c 	bl	8000d5c <__malloc_unlock>
 8000d44:	e794      	b.n	8000c70 <_malloc_r+0x20>
 8000d46:	6005      	str	r5, [r0, #0]
 8000d48:	e7d6      	b.n	8000cf8 <_malloc_r+0xa8>
 8000d4a:	bf00      	nop
 8000d4c:	200001e8 	.word	0x200001e8

08000d50 <__malloc_lock>:
 8000d50:	4801      	ldr	r0, [pc, #4]	@ (8000d58 <__malloc_lock+0x8>)
 8000d52:	f7ff bf0e 	b.w	8000b72 <__retarget_lock_acquire_recursive>
 8000d56:	bf00      	nop
 8000d58:	200001e0 	.word	0x200001e0

08000d5c <__malloc_unlock>:
 8000d5c:	4801      	ldr	r0, [pc, #4]	@ (8000d64 <__malloc_unlock+0x8>)
 8000d5e:	f7ff bf09 	b.w	8000b74 <__retarget_lock_release_recursive>
 8000d62:	bf00      	nop
 8000d64:	200001e0 	.word	0x200001e0

08000d68 <__sflush_r>:
 8000d68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d70:	0716      	lsls	r6, r2, #28
 8000d72:	4605      	mov	r5, r0
 8000d74:	460c      	mov	r4, r1
 8000d76:	d454      	bmi.n	8000e22 <__sflush_r+0xba>
 8000d78:	684b      	ldr	r3, [r1, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	dc02      	bgt.n	8000d84 <__sflush_r+0x1c>
 8000d7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	dd48      	ble.n	8000e16 <__sflush_r+0xae>
 8000d84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000d86:	2e00      	cmp	r6, #0
 8000d88:	d045      	beq.n	8000e16 <__sflush_r+0xae>
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000d90:	682f      	ldr	r7, [r5, #0]
 8000d92:	6a21      	ldr	r1, [r4, #32]
 8000d94:	602b      	str	r3, [r5, #0]
 8000d96:	d030      	beq.n	8000dfa <__sflush_r+0x92>
 8000d98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000d9a:	89a3      	ldrh	r3, [r4, #12]
 8000d9c:	0759      	lsls	r1, r3, #29
 8000d9e:	d505      	bpl.n	8000dac <__sflush_r+0x44>
 8000da0:	6863      	ldr	r3, [r4, #4]
 8000da2:	1ad2      	subs	r2, r2, r3
 8000da4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000da6:	b10b      	cbz	r3, 8000dac <__sflush_r+0x44>
 8000da8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000daa:	1ad2      	subs	r2, r2, r3
 8000dac:	2300      	movs	r3, #0
 8000dae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000db0:	6a21      	ldr	r1, [r4, #32]
 8000db2:	4628      	mov	r0, r5
 8000db4:	47b0      	blx	r6
 8000db6:	1c43      	adds	r3, r0, #1
 8000db8:	89a3      	ldrh	r3, [r4, #12]
 8000dba:	d106      	bne.n	8000dca <__sflush_r+0x62>
 8000dbc:	6829      	ldr	r1, [r5, #0]
 8000dbe:	291d      	cmp	r1, #29
 8000dc0:	d82b      	bhi.n	8000e1a <__sflush_r+0xb2>
 8000dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8000e6c <__sflush_r+0x104>)
 8000dc4:	410a      	asrs	r2, r1
 8000dc6:	07d6      	lsls	r6, r2, #31
 8000dc8:	d427      	bmi.n	8000e1a <__sflush_r+0xb2>
 8000dca:	2200      	movs	r2, #0
 8000dcc:	6062      	str	r2, [r4, #4]
 8000dce:	04d9      	lsls	r1, r3, #19
 8000dd0:	6922      	ldr	r2, [r4, #16]
 8000dd2:	6022      	str	r2, [r4, #0]
 8000dd4:	d504      	bpl.n	8000de0 <__sflush_r+0x78>
 8000dd6:	1c42      	adds	r2, r0, #1
 8000dd8:	d101      	bne.n	8000dde <__sflush_r+0x76>
 8000dda:	682b      	ldr	r3, [r5, #0]
 8000ddc:	b903      	cbnz	r3, 8000de0 <__sflush_r+0x78>
 8000dde:	6560      	str	r0, [r4, #84]	@ 0x54
 8000de0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000de2:	602f      	str	r7, [r5, #0]
 8000de4:	b1b9      	cbz	r1, 8000e16 <__sflush_r+0xae>
 8000de6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000dea:	4299      	cmp	r1, r3
 8000dec:	d002      	beq.n	8000df4 <__sflush_r+0x8c>
 8000dee:	4628      	mov	r0, r5
 8000df0:	f7ff fec2 	bl	8000b78 <_free_r>
 8000df4:	2300      	movs	r3, #0
 8000df6:	6363      	str	r3, [r4, #52]	@ 0x34
 8000df8:	e00d      	b.n	8000e16 <__sflush_r+0xae>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	4628      	mov	r0, r5
 8000dfe:	47b0      	blx	r6
 8000e00:	4602      	mov	r2, r0
 8000e02:	1c50      	adds	r0, r2, #1
 8000e04:	d1c9      	bne.n	8000d9a <__sflush_r+0x32>
 8000e06:	682b      	ldr	r3, [r5, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d0c6      	beq.n	8000d9a <__sflush_r+0x32>
 8000e0c:	2b1d      	cmp	r3, #29
 8000e0e:	d001      	beq.n	8000e14 <__sflush_r+0xac>
 8000e10:	2b16      	cmp	r3, #22
 8000e12:	d11e      	bne.n	8000e52 <__sflush_r+0xea>
 8000e14:	602f      	str	r7, [r5, #0]
 8000e16:	2000      	movs	r0, #0
 8000e18:	e022      	b.n	8000e60 <__sflush_r+0xf8>
 8000e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	e01b      	b.n	8000e5a <__sflush_r+0xf2>
 8000e22:	690f      	ldr	r7, [r1, #16]
 8000e24:	2f00      	cmp	r7, #0
 8000e26:	d0f6      	beq.n	8000e16 <__sflush_r+0xae>
 8000e28:	0793      	lsls	r3, r2, #30
 8000e2a:	680e      	ldr	r6, [r1, #0]
 8000e2c:	bf08      	it	eq
 8000e2e:	694b      	ldreq	r3, [r1, #20]
 8000e30:	600f      	str	r7, [r1, #0]
 8000e32:	bf18      	it	ne
 8000e34:	2300      	movne	r3, #0
 8000e36:	eba6 0807 	sub.w	r8, r6, r7
 8000e3a:	608b      	str	r3, [r1, #8]
 8000e3c:	f1b8 0f00 	cmp.w	r8, #0
 8000e40:	dde9      	ble.n	8000e16 <__sflush_r+0xae>
 8000e42:	6a21      	ldr	r1, [r4, #32]
 8000e44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000e46:	4643      	mov	r3, r8
 8000e48:	463a      	mov	r2, r7
 8000e4a:	4628      	mov	r0, r5
 8000e4c:	47b0      	blx	r6
 8000e4e:	2800      	cmp	r0, #0
 8000e50:	dc08      	bgt.n	8000e64 <__sflush_r+0xfc>
 8000e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e5a:	81a3      	strh	r3, [r4, #12]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e64:	4407      	add	r7, r0
 8000e66:	eba8 0800 	sub.w	r8, r8, r0
 8000e6a:	e7e7      	b.n	8000e3c <__sflush_r+0xd4>
 8000e6c:	dfbffffe 	.word	0xdfbffffe

08000e70 <_fflush_r>:
 8000e70:	b538      	push	{r3, r4, r5, lr}
 8000e72:	690b      	ldr	r3, [r1, #16]
 8000e74:	4605      	mov	r5, r0
 8000e76:	460c      	mov	r4, r1
 8000e78:	b913      	cbnz	r3, 8000e80 <_fflush_r+0x10>
 8000e7a:	2500      	movs	r5, #0
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	bd38      	pop	{r3, r4, r5, pc}
 8000e80:	b118      	cbz	r0, 8000e8a <_fflush_r+0x1a>
 8000e82:	6a03      	ldr	r3, [r0, #32]
 8000e84:	b90b      	cbnz	r3, 8000e8a <_fflush_r+0x1a>
 8000e86:	f7ff fc8f 	bl	80007a8 <__sinit>
 8000e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f3      	beq.n	8000e7a <_fflush_r+0xa>
 8000e92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000e94:	07d0      	lsls	r0, r2, #31
 8000e96:	d404      	bmi.n	8000ea2 <_fflush_r+0x32>
 8000e98:	0599      	lsls	r1, r3, #22
 8000e9a:	d402      	bmi.n	8000ea2 <_fflush_r+0x32>
 8000e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e9e:	f7ff fe68 	bl	8000b72 <__retarget_lock_acquire_recursive>
 8000ea2:	4628      	mov	r0, r5
 8000ea4:	4621      	mov	r1, r4
 8000ea6:	f7ff ff5f 	bl	8000d68 <__sflush_r>
 8000eaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000eac:	07da      	lsls	r2, r3, #31
 8000eae:	4605      	mov	r5, r0
 8000eb0:	d4e4      	bmi.n	8000e7c <_fflush_r+0xc>
 8000eb2:	89a3      	ldrh	r3, [r4, #12]
 8000eb4:	059b      	lsls	r3, r3, #22
 8000eb6:	d4e1      	bmi.n	8000e7c <_fflush_r+0xc>
 8000eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000eba:	f7ff fe5b 	bl	8000b74 <__retarget_lock_release_recursive>
 8000ebe:	e7dd      	b.n	8000e7c <_fflush_r+0xc>

08000ec0 <__swhatbuf_r>:
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	460c      	mov	r4, r1
 8000ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ec8:	2900      	cmp	r1, #0
 8000eca:	b096      	sub	sp, #88	@ 0x58
 8000ecc:	4615      	mov	r5, r2
 8000ece:	461e      	mov	r6, r3
 8000ed0:	da0d      	bge.n	8000eee <__swhatbuf_r+0x2e>
 8000ed2:	89a3      	ldrh	r3, [r4, #12]
 8000ed4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000ed8:	f04f 0100 	mov.w	r1, #0
 8000edc:	bf14      	ite	ne
 8000ede:	2340      	movne	r3, #64	@ 0x40
 8000ee0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	6031      	str	r1, [r6, #0]
 8000ee8:	602b      	str	r3, [r5, #0]
 8000eea:	b016      	add	sp, #88	@ 0x58
 8000eec:	bd70      	pop	{r4, r5, r6, pc}
 8000eee:	466a      	mov	r2, sp
 8000ef0:	f000 f848 	bl	8000f84 <_fstat_r>
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	dbec      	blt.n	8000ed2 <__swhatbuf_r+0x12>
 8000ef8:	9901      	ldr	r1, [sp, #4]
 8000efa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000efe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000f02:	4259      	negs	r1, r3
 8000f04:	4159      	adcs	r1, r3
 8000f06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f0a:	e7eb      	b.n	8000ee4 <__swhatbuf_r+0x24>

08000f0c <__smakebuf_r>:
 8000f0c:	898b      	ldrh	r3, [r1, #12]
 8000f0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f10:	079d      	lsls	r5, r3, #30
 8000f12:	4606      	mov	r6, r0
 8000f14:	460c      	mov	r4, r1
 8000f16:	d507      	bpl.n	8000f28 <__smakebuf_r+0x1c>
 8000f18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000f1c:	6023      	str	r3, [r4, #0]
 8000f1e:	6123      	str	r3, [r4, #16]
 8000f20:	2301      	movs	r3, #1
 8000f22:	6163      	str	r3, [r4, #20]
 8000f24:	b003      	add	sp, #12
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	ab01      	add	r3, sp, #4
 8000f2a:	466a      	mov	r2, sp
 8000f2c:	f7ff ffc8 	bl	8000ec0 <__swhatbuf_r>
 8000f30:	9f00      	ldr	r7, [sp, #0]
 8000f32:	4605      	mov	r5, r0
 8000f34:	4639      	mov	r1, r7
 8000f36:	4630      	mov	r0, r6
 8000f38:	f7ff fe8a 	bl	8000c50 <_malloc_r>
 8000f3c:	b948      	cbnz	r0, 8000f52 <__smakebuf_r+0x46>
 8000f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f42:	059a      	lsls	r2, r3, #22
 8000f44:	d4ee      	bmi.n	8000f24 <__smakebuf_r+0x18>
 8000f46:	f023 0303 	bic.w	r3, r3, #3
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	81a3      	strh	r3, [r4, #12]
 8000f50:	e7e2      	b.n	8000f18 <__smakebuf_r+0xc>
 8000f52:	89a3      	ldrh	r3, [r4, #12]
 8000f54:	6020      	str	r0, [r4, #0]
 8000f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f5a:	81a3      	strh	r3, [r4, #12]
 8000f5c:	9b01      	ldr	r3, [sp, #4]
 8000f5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000f62:	b15b      	cbz	r3, 8000f7c <__smakebuf_r+0x70>
 8000f64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f68:	4630      	mov	r0, r6
 8000f6a:	f000 f81d 	bl	8000fa8 <_isatty_r>
 8000f6e:	b128      	cbz	r0, 8000f7c <__smakebuf_r+0x70>
 8000f70:	89a3      	ldrh	r3, [r4, #12]
 8000f72:	f023 0303 	bic.w	r3, r3, #3
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	81a3      	strh	r3, [r4, #12]
 8000f7c:	89a3      	ldrh	r3, [r4, #12]
 8000f7e:	431d      	orrs	r5, r3
 8000f80:	81a5      	strh	r5, [r4, #12]
 8000f82:	e7cf      	b.n	8000f24 <__smakebuf_r+0x18>

08000f84 <_fstat_r>:
 8000f84:	b538      	push	{r3, r4, r5, lr}
 8000f86:	4d07      	ldr	r5, [pc, #28]	@ (8000fa4 <_fstat_r+0x20>)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	4608      	mov	r0, r1
 8000f8e:	4611      	mov	r1, r2
 8000f90:	602b      	str	r3, [r5, #0]
 8000f92:	f7ff faf4 	bl	800057e <_fstat>
 8000f96:	1c43      	adds	r3, r0, #1
 8000f98:	d102      	bne.n	8000fa0 <_fstat_r+0x1c>
 8000f9a:	682b      	ldr	r3, [r5, #0]
 8000f9c:	b103      	cbz	r3, 8000fa0 <_fstat_r+0x1c>
 8000f9e:	6023      	str	r3, [r4, #0]
 8000fa0:	bd38      	pop	{r3, r4, r5, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200001dc 	.word	0x200001dc

08000fa8 <_isatty_r>:
 8000fa8:	b538      	push	{r3, r4, r5, lr}
 8000faa:	4d06      	ldr	r5, [pc, #24]	@ (8000fc4 <_isatty_r+0x1c>)
 8000fac:	2300      	movs	r3, #0
 8000fae:	4604      	mov	r4, r0
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	602b      	str	r3, [r5, #0]
 8000fb4:	f7ff faf3 	bl	800059e <_isatty>
 8000fb8:	1c43      	adds	r3, r0, #1
 8000fba:	d102      	bne.n	8000fc2 <_isatty_r+0x1a>
 8000fbc:	682b      	ldr	r3, [r5, #0]
 8000fbe:	b103      	cbz	r3, 8000fc2 <_isatty_r+0x1a>
 8000fc0:	6023      	str	r3, [r4, #0]
 8000fc2:	bd38      	pop	{r3, r4, r5, pc}
 8000fc4:	200001dc 	.word	0x200001dc

08000fc8 <_sbrk_r>:
 8000fc8:	b538      	push	{r3, r4, r5, lr}
 8000fca:	4d06      	ldr	r5, [pc, #24]	@ (8000fe4 <_sbrk_r+0x1c>)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4604      	mov	r4, r0
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	602b      	str	r3, [r5, #0]
 8000fd4:	f7ff fafc 	bl	80005d0 <_sbrk>
 8000fd8:	1c43      	adds	r3, r0, #1
 8000fda:	d102      	bne.n	8000fe2 <_sbrk_r+0x1a>
 8000fdc:	682b      	ldr	r3, [r5, #0]
 8000fde:	b103      	cbz	r3, 8000fe2 <_sbrk_r+0x1a>
 8000fe0:	6023      	str	r3, [r4, #0]
 8000fe2:	bd38      	pop	{r3, r4, r5, pc}
 8000fe4:	200001dc 	.word	0x200001dc

08000fe8 <_init>:
 8000fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fea:	bf00      	nop
 8000fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fee:	bc08      	pop	{r3}
 8000ff0:	469e      	mov	lr, r3
 8000ff2:	4770      	bx	lr

08000ff4 <_fini>:
 8000ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff6:	bf00      	nop
 8000ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ffa:	bc08      	pop	{r3}
 8000ffc:	469e      	mov	lr, r3
 8000ffe:	4770      	bx	lr
